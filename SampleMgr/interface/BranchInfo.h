/*******************************************************************************
*
*  Filename    : format.h
*  Description : The branch format for the bprimeKit nTuple
*
*******************************************************************************/
#ifndef __BPRIMEKIT_FORMAT_H__
#define __BPRIMEKIT_FORMAT_H__

// ------------------------------  Required libraries  -------------------------------
#include <string>
#include <TTree.h>
#include <vector>
// -------------------------------  Size limitations  --------------------------------
#define MAX_LEPTONS        256
#define MAX_TRACKS         256
#define MAX_JETS           128
#define MAX_PHOTONS        128
#define MAX_GENS           128
#define MAX_LHE            256
#define MAX_Vertices       256
#define MAX_BX             128
#define MAX_TRGOBJS        64
#define N_TRIGGER_BOOKINGS 3000
#define MAX_MEPS           128

template<class T>
inline void
SetBranchAddress( TTree* root, const std::string& bname, T** add )
{
    if( root->GetBranchStatus( bname.c_str() ) ){
        root->SetBranchAddress( bname.c_str(), add );
    }
}

template<class T>
inline void
SetBranchAddress( TTree* root, const std::string& bname, T* add )
{
    if( root->GetBranchStatus( bname.c_str() ) ){
        root->SetBranchAddress( bname.c_str(), add );
    }
}

class EvtInfoBranches {
    public:

        Int_t RunNo;
        ULong64_t EvtNo;
        Int_t BxNo;
        Int_t LumiNo;
        Int_t Orbit;
        Int_t McFlag;
        Int_t EventTime;
        Bool_t Flag_METFilter;
        Float_t Rho;
        Float_t RhoNoFastJet;
        Float_t BeamSpotX;
        Float_t BeamSpotY;
        Float_t BeamSpotZ;
        Float_t BSsigmaZ;
        Int_t nBX;
        Int_t nPU [ MAX_BX ];
        Int_t BXPU [ MAX_BX ];
        Float_t TrueIT [ MAX_BX ];
        Float_t PFMET;
        Float_t PFMETPhi;
        Float_t PFMETType1CorrPtShiftJetEnUp;
        Float_t PFMETType1CorrPtShiftJetEnDown;
        Float_t PFMETType1CorrPtShiftJetResUp;
        Float_t PFMETType1CorrPtShiftJetResDown;
        Float_t PFMETType1CorrPtShiftUnclusteredEnUp;
        Float_t PFMETType1CorrPtShiftUnclusteredEnDown;
        Float_t PFMETType1CorrPhiShiftJetEnUp;
        Float_t PFMETType1CorrPhiShiftJetEnDown;
        Float_t PFMETType1CorrPhiShiftJetResUp;
        Float_t PFMETType1CorrPhiShiftJetResDown;
        Float_t PFMETType1CorrPhiShiftUnclusteredEnUp;
        Float_t PFMETType1CorrPhiShiftUnclusteredEnDown;
        Float_t PFRawMET;
        Float_t PFRawMETPhi;
        Float_t PFSumEt;
        Float_t PFMETSig;
        Float_t PFMETlongitudinal;
        Float_t PFMETRealSig;
        Float_t PFGenMET;
        Float_t PFGenMETPhi;
        Float_t PFMETx;
        Float_t PFMETy;
        Float_t PuppiMET;
        Float_t PuppiMETPhi;
        Float_t PuppiMETType1CorrPtShiftJetEnUp;
        Float_t PuppiMETType1CorrPtShiftJetEnDown;
        Float_t PuppiMETType1CorrPtShiftJetResUp;
        Float_t PuppiMETType1CorrPtShiftJetResDown;
        Float_t PuppiMETType1CorrPtShiftUnclusteredEnUp;
        Float_t PuppiMETType1CorrPtShiftUnclusteredEnDown;
        Float_t PuppiMETType1CorrPhiShiftJetEnUp;
        Float_t PuppiMETType1CorrPhiShiftJetEnDown;
        Float_t PuppiMETType1CorrPhiShiftJetResUp;
        Float_t PuppiMETType1CorrPhiShiftJetResDown;
        Float_t PuppiMETType1CorrPhiShiftUnclusteredEnUp;
        Float_t PuppiMETType1CorrPhiShiftUnclusteredEnDown;
        Float_t PuppiRawMET;
        Float_t PuppiRawMETPhi;
        Float_t PuppiSumEt;
        Float_t PuppiMETSig;
        Float_t PuppiMETlongitudinal;
        Float_t PuppiMETRealSig;
        Float_t PuppiGenMET;
        Float_t PuppiGenMETPhi;
        Float_t PuppiMETx;
        Float_t PuppiMETy;

        void RegisterTree( TTree* root, const std::string& name = "EvtInfo" )
        {
            root->Branch( ( name + ".RunNo" ).c_str(),                                      &RunNo,                                      ( name + "RunNo/I" ).c_str() );
            root->Branch( ( name + ".EvtNo" ).c_str(),                                      &EvtNo,                                      ( name + "EvtNo/l" ).c_str() );
            root->Branch( ( name + ".BxNo" ).c_str(),                                       &BxNo,                                       ( name + "BxNo/I" ).c_str() );
            root->Branch( ( name + ".LumiNo" ).c_str(),                                     &LumiNo,                                     ( name + "LumiNo/I" ).c_str() );
            root->Branch( ( name + ".Orbit" ).c_str(),                                      &Orbit,                                      ( name + "Orbit/I" ).c_str() );
            root->Branch( ( name + ".McFlag" ).c_str(),                                     &McFlag,                                     ( name + "McFlag/I" ).c_str() );
            root->Branch( ( name + ".EventTime" ).c_str(),                                  &EventTime,                                  ( name + "EventTime/I" ).c_str() );
            root->Branch( ( name + ".Flag_METFilter" ).c_str(),                             &Flag_METFilter,                             ( name + "Flag_METFilter/O" ).c_str() );
            root->Branch( ( name + ".Rho" ).c_str(),                                        &Rho,                                        ( name + "Rho/F" ).c_str() );
            root->Branch( ( name + ".RhoNoFastJet" ).c_str(),                               &RhoNoFastJet,                               ( name + "RhoNoFastJet/F" ).c_str() );
            root->Branch( ( name + ".BeamSpotX" ).c_str(),                                  &BeamSpotX,                                  ( name + "BeamSpotX/F" ).c_str() );
            root->Branch( ( name + ".BeamSpotY" ).c_str(),                                  &BeamSpotY,                                  ( name + "BeamSpotY/F" ).c_str() );
            root->Branch( ( name + ".BeamSpotZ" ).c_str(),                                  &BeamSpotZ,                                  ( name + "BeamSpotZ/F" ).c_str() );
            root->Branch( ( name + ".BSsigmaZ" ).c_str(),                                   &BSsigmaZ,                                   ( name + "BSsigmaZ/F" ).c_str() );
            root->Branch( ( name + ".nBX" ).c_str(),                                        &nBX,                                        ( name + "nBX/I" ).c_str() );
            root->Branch( ( name + ".nPU" ).c_str(),                                        nPU,                                         ( name + ".nPU[" + name + ".nBX]/I" ).c_str() );
            root->Branch( ( name + ".BXPU" ).c_str(),                                       BXPU,                                        ( name + ".BXPU[" + name + ".nBX]/I" ).c_str() );
            root->Branch( ( name + ".TrueIT" ).c_str(),                                     TrueIT,                                      ( name + ".TrueIT[" + name + ".nBX]/F" ).c_str() );
            root->Branch( ( name + ".PFMET" ).c_str(),                                      &PFMET,                                      ( name + "PFMET/F" ).c_str() );
            root->Branch( ( name + ".PFMETPhi" ).c_str(),                                   &PFMETPhi,                                   ( name + "PFMETPhi/F" ).c_str() );
            root->Branch( ( name + ".PFMETType1CorrPtShiftJetEnUp" ).c_str(),               &PFMETType1CorrPtShiftJetEnUp,               ( name + "PFMETType1CorrPtShiftJetEnUp/F" ).c_str() );
            root->Branch( ( name + ".PFMETType1CorrPtShiftJetEnDown" ).c_str(),             &PFMETType1CorrPtShiftJetEnDown,             ( name + "PFMETType1CorrPtShiftJetEnDown/F" ).c_str() );
            root->Branch( ( name + ".PFMETType1CorrPtShiftJetResUp" ).c_str(),              &PFMETType1CorrPtShiftJetResUp,              ( name + "PFMETType1CorrPtShiftJetResUp/F" ).c_str() );
            root->Branch( ( name + ".PFMETType1CorrPtShiftJetResDown" ).c_str(),            &PFMETType1CorrPtShiftJetResDown,            ( name + "PFMETType1CorrPtShiftJetResDown/F" ).c_str() );
            root->Branch( ( name + ".PFMETType1CorrPtShiftUnclusteredEnUp" ).c_str(),       &PFMETType1CorrPtShiftUnclusteredEnUp,       ( name + "PFMETType1CorrPtShiftUnclusteredEnUp/F" ).c_str() );
            root->Branch( ( name + ".PFMETType1CorrPtShiftUnclusteredEnDown" ).c_str(),     &PFMETType1CorrPtShiftUnclusteredEnDown,     ( name + "PFMETType1CorrPtShiftUnclusteredEnDown/F" ).c_str() );
            root->Branch( ( name + ".PFMETType1CorrPhiShiftJetEnUp" ).c_str(),              &PFMETType1CorrPhiShiftJetEnUp,              ( name + "PFMETType1CorrPhiShiftJetEnUp/F" ).c_str() );
            root->Branch( ( name + ".PFMETType1CorrPhiShiftJetEnDown" ).c_str(),            &PFMETType1CorrPhiShiftJetEnDown,            ( name + "PFMETType1CorrPhiShiftJetEnDown/F" ).c_str() );
            root->Branch( ( name + ".PFMETType1CorrPhiShiftJetResUp" ).c_str(),             &PFMETType1CorrPhiShiftJetResUp,             ( name + "PFMETType1CorrPhiShiftJetResUp/F" ).c_str() );
            root->Branch( ( name + ".PFMETType1CorrPhiShiftJetResDown" ).c_str(),           &PFMETType1CorrPhiShiftJetResDown,           ( name + "PFMETType1CorrPhiShiftJetResDown/F" ).c_str() );
            root->Branch( ( name + ".PFMETType1CorrPhiShiftUnclusteredEnUp" ).c_str(),      &PFMETType1CorrPhiShiftUnclusteredEnUp,      ( name + "PFMETType1CorrPhiShiftUnclusteredEnUp/F" ).c_str() );
            root->Branch( ( name + ".PFMETType1CorrPhiShiftUnclusteredEnDown" ).c_str(),    &PFMETType1CorrPhiShiftUnclusteredEnDown,    ( name + "PFMETType1CorrPhiShiftUnclusteredEnDown/F" ).c_str() );
            root->Branch( ( name + ".PFRawMET" ).c_str(),                                   &PFRawMET,                                   ( name + "PFRawMET/F" ).c_str() );
            root->Branch( ( name + ".PFRawMETPhi" ).c_str(),                                &PFRawMETPhi,                                ( name + "PFRawMETPhi/F" ).c_str() );
            root->Branch( ( name + ".PFSumEt" ).c_str(),                                    &PFSumEt,                                    ( name + "PFSumEt/F" ).c_str() );
            root->Branch( ( name + ".PFMETSig" ).c_str(),                                   &PFMETSig,                                   ( name + "PFMETSig/F" ).c_str() );
            root->Branch( ( name + ".PFMETlongitudinal" ).c_str(),                          &PFMETlongitudinal,                          ( name + "PFMETlongitudinal/F" ).c_str() );
            root->Branch( ( name + ".PFMETRealSig" ).c_str(),                               &PFMETRealSig,                               ( name + "PFMETRealSig/F" ).c_str() );
            root->Branch( ( name + ".PFGenMET" ).c_str(),                                   &PFGenMET,                                   ( name + "PFGenMET/F" ).c_str() );
            root->Branch( ( name + ".PFGenMETPhi" ).c_str(),                                &PFGenMETPhi,                                ( name + "PFGenMETPhi/F" ).c_str() );
            root->Branch( ( name + ".PFMETx" ).c_str(),                                     &PFMETx,                                     ( name + "PFMETx/F" ).c_str() );
            root->Branch( ( name + ".PFMETy" ).c_str(),                                     &PFMETy,                                     ( name + "PFMETy/F" ).c_str() );
            root->Branch( ( name + ".PuppiMET" ).c_str(),                                   &PuppiMET,                                   ( name + "PuppiMET/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETPhi" ).c_str(),                                &PuppiMETPhi,                                ( name + "PuppiMETPhi/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETType1CorrPtShiftJetEnUp" ).c_str(),            &PuppiMETType1CorrPtShiftJetEnUp,            ( name + "PuppiMETType1CorrPtShiftJetEnUp/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETType1CorrPtShiftJetEnDown" ).c_str(),          &PuppiMETType1CorrPtShiftJetEnDown,          ( name + "PuppiMETType1CorrPtShiftJetEnDown/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETType1CorrPtShiftJetResUp" ).c_str(),           &PuppiMETType1CorrPtShiftJetResUp,           ( name + "PuppiMETType1CorrPtShiftJetResUp/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETType1CorrPtShiftJetResDown" ).c_str(),         &PuppiMETType1CorrPtShiftJetResDown,         ( name + "PuppiMETType1CorrPtShiftJetResDown/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETType1CorrPtShiftUnclusteredEnUp" ).c_str(),    &PuppiMETType1CorrPtShiftUnclusteredEnUp,    ( name + "PuppiMETType1CorrPtShiftUnclusteredEnUp/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETType1CorrPtShiftUnclusteredEnDown" ).c_str(),  &PuppiMETType1CorrPtShiftUnclusteredEnDown,  ( name + "PuppiMETType1CorrPtShiftUnclusteredEnDown/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETType1CorrPhiShiftJetEnUp" ).c_str(),           &PuppiMETType1CorrPhiShiftJetEnUp,           ( name + "PuppiMETType1CorrPhiShiftJetEnUp/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETType1CorrPhiShiftJetEnDown" ).c_str(),         &PuppiMETType1CorrPhiShiftJetEnDown,         ( name + "PuppiMETType1CorrPhiShiftJetEnDown/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETType1CorrPhiShiftJetResUp" ).c_str(),          &PuppiMETType1CorrPhiShiftJetResUp,          ( name + "PuppiMETType1CorrPhiShiftJetResUp/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETType1CorrPhiShiftJetResDown" ).c_str(),        &PuppiMETType1CorrPhiShiftJetResDown,        ( name + "PuppiMETType1CorrPhiShiftJetResDown/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETType1CorrPhiShiftUnclusteredEnUp" ).c_str(),   &PuppiMETType1CorrPhiShiftUnclusteredEnUp,   ( name + "PuppiMETType1CorrPhiShiftUnclusteredEnUp/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETType1CorrPhiShiftUnclusteredEnDown" ).c_str(), &PuppiMETType1CorrPhiShiftUnclusteredEnDown, ( name + "PuppiMETType1CorrPhiShiftUnclusteredEnDown/F" ).c_str() );
            root->Branch( ( name + ".PuppiRawMET" ).c_str(),                                &PuppiRawMET,                                ( name + "PuppiRawMET/F" ).c_str() );
            root->Branch( ( name + ".PuppiRawMETPhi" ).c_str(),                             &PuppiRawMETPhi,                             ( name + "PuppiRawMETPhi/F" ).c_str() );
            root->Branch( ( name + ".PuppiSumEt" ).c_str(),                                 &PuppiSumEt,                                 ( name + "PuppiSumEt/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETSig" ).c_str(),                                &PuppiMETSig,                                ( name + "PuppiMETSig/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETlongitudinal" ).c_str(),                       &PuppiMETlongitudinal,                       ( name + "PuppiMETlongitudinal/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETRealSig" ).c_str(),                            &PuppiMETRealSig,                            ( name + "PuppiMETRealSig/F" ).c_str() );
            root->Branch( ( name + ".PuppiGenMET" ).c_str(),                                &PuppiGenMET,                                ( name + "PuppiGenMET/F" ).c_str() );
            root->Branch( ( name + ".PuppiGenMETPhi" ).c_str(),                             &PuppiGenMETPhi,                             ( name + "PuppiGenMETPhi/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETx" ).c_str(),                                  &PuppiMETx,                                  ( name + "PuppiMETx/F" ).c_str() );
            root->Branch( ( name + ".PuppiMETy" ).c_str(),                                  &PuppiMETy,                                  ( name + "PuppiMETy/F" ).c_str() );
        }

        void Register( TTree* root, const std::string& name = "EvtInfo" )
        {
            SetBranchAddress( root, ( name + ".RunNo" ).c_str(),                                      &RunNo );
            SetBranchAddress( root, ( name + ".EvtNo" ).c_str(),                                      &EvtNo );
            SetBranchAddress( root, ( name + ".BxNo" ).c_str(),                                       &BxNo );
            SetBranchAddress( root, ( name + ".LumiNo" ).c_str(),                                     &LumiNo );
            SetBranchAddress( root, ( name + ".Orbit" ).c_str(),                                      &Orbit );
            SetBranchAddress( root, ( name + ".McFlag" ).c_str(),                                     &McFlag );
            SetBranchAddress( root, ( name + ".EventTime" ).c_str(),                                  &EventTime );
            SetBranchAddress( root, ( name + ".Flag_METFilter" ).c_str(),                             &Flag_METFilter );
            SetBranchAddress( root, ( name + ".Rho" ).c_str(),                                        &Rho );
            SetBranchAddress( root, ( name + ".RhoNoFastJet" ).c_str(),                               &RhoNoFastJet );
            SetBranchAddress( root, ( name + ".BeamSpotX" ).c_str(),                                  &BeamSpotX );
            SetBranchAddress( root, ( name + ".BeamSpotY" ).c_str(),                                  &BeamSpotY );
            SetBranchAddress( root, ( name + ".BeamSpotZ" ).c_str(),                                  &BeamSpotZ );
            SetBranchAddress( root, ( name + ".BSsigmaZ" ).c_str(),                                   &BSsigmaZ );
            SetBranchAddress( root, ( name + ".nBX" ).c_str(),                                        &nBX );
            SetBranchAddress( root, ( name + ".nPU" ).c_str(),                                        nPU );
            SetBranchAddress( root, ( name + ".BXPU" ).c_str(),                                       BXPU );
            SetBranchAddress( root, ( name + ".TrueIT" ).c_str(),                                     TrueIT );
            SetBranchAddress( root, ( name + ".PFMET" ).c_str(),                                      &PFMET );
            SetBranchAddress( root, ( name + ".PFMETPhi" ).c_str(),                                   &PFMETPhi );
            SetBranchAddress( root, ( name + ".PFMETType1CorrPtShiftJetEnUp" ).c_str(),               &PFMETType1CorrPtShiftJetEnUp );
            SetBranchAddress( root, ( name + ".PFMETType1CorrPtShiftJetEnDown" ).c_str(),             &PFMETType1CorrPtShiftJetEnDown );
            SetBranchAddress( root, ( name + ".PFMETType1CorrPtShiftJetResUp" ).c_str(),              &PFMETType1CorrPtShiftJetResUp );
            SetBranchAddress( root, ( name + ".PFMETType1CorrPtShiftJetResDown" ).c_str(),            &PFMETType1CorrPtShiftJetResDown );
            SetBranchAddress( root, ( name + ".PFMETType1CorrPtShiftUnclusteredEnUp" ).c_str(),       &PFMETType1CorrPtShiftUnclusteredEnUp );
            SetBranchAddress( root, ( name + ".PFMETType1CorrPtShiftUnclusteredEnDown" ).c_str(),     &PFMETType1CorrPtShiftUnclusteredEnDown );
            SetBranchAddress( root, ( name + ".PFMETType1CorrPhiShiftJetEnUp" ).c_str(),              &PFMETType1CorrPhiShiftJetEnUp );
            SetBranchAddress( root, ( name + ".PFMETType1CorrPhiShiftJetEnDown" ).c_str(),            &PFMETType1CorrPhiShiftJetEnDown );
            SetBranchAddress( root, ( name + ".PFMETType1CorrPhiShiftJetResUp" ).c_str(),             &PFMETType1CorrPhiShiftJetResUp );
            SetBranchAddress( root, ( name + ".PFMETType1CorrPhiShiftJetResDown" ).c_str(),           &PFMETType1CorrPhiShiftJetResDown );
            SetBranchAddress( root, ( name + ".PFMETType1CorrPhiShiftUnclusteredEnUp" ).c_str(),      &PFMETType1CorrPhiShiftUnclusteredEnUp );
            SetBranchAddress( root, ( name + ".PFMETType1CorrPhiShiftUnclusteredEnDown" ).c_str(),    &PFMETType1CorrPhiShiftUnclusteredEnDown );
            SetBranchAddress( root, ( name + ".PFRawMET" ).c_str(),                                   &PFRawMET );
            SetBranchAddress( root, ( name + ".PFRawMETPhi" ).c_str(),                                &PFRawMETPhi );
            SetBranchAddress( root, ( name + ".PFSumEt" ).c_str(),                                    &PFSumEt );
            SetBranchAddress( root, ( name + ".PFMETSig" ).c_str(),                                   &PFMETSig );
            SetBranchAddress( root, ( name + ".PFMETlongitudinal" ).c_str(),                          &PFMETlongitudinal );
            SetBranchAddress( root, ( name + ".PFMETRealSig" ).c_str(),                               &PFMETRealSig );
            SetBranchAddress( root, ( name + ".PFGenMET" ).c_str(),                                   &PFGenMET );
            SetBranchAddress( root, ( name + ".PFGenMETPhi" ).c_str(),                                &PFGenMETPhi );
            SetBranchAddress( root, ( name + ".PFMETx" ).c_str(),                                     &PFMETx );
            SetBranchAddress( root, ( name + ".PFMETy" ).c_str(),                                     &PFMETy );
            SetBranchAddress( root, ( name + ".PuppiMET" ).c_str(),                                   &PuppiMET );
            SetBranchAddress( root, ( name + ".PuppiMETPhi" ).c_str(),                                &PuppiMETPhi );
            SetBranchAddress( root, ( name + ".PuppiMETType1CorrPtShiftJetEnUp" ).c_str(),            &PuppiMETType1CorrPtShiftJetEnUp );
            SetBranchAddress( root, ( name + ".PuppiMETType1CorrPtShiftJetEnDown" ).c_str(),          &PuppiMETType1CorrPtShiftJetEnDown );
            SetBranchAddress( root, ( name + ".PuppiMETType1CorrPtShiftJetResUp" ).c_str(),           &PuppiMETType1CorrPtShiftJetResUp );
            SetBranchAddress( root, ( name + ".PuppiMETType1CorrPtShiftJetResDown" ).c_str(),         &PuppiMETType1CorrPtShiftJetResDown );
            SetBranchAddress( root, ( name + ".PuppiMETType1CorrPtShiftUnclusteredEnUp" ).c_str(),    &PuppiMETType1CorrPtShiftUnclusteredEnUp );
            SetBranchAddress( root, ( name + ".PuppiMETType1CorrPtShiftUnclusteredEnDown" ).c_str(),  &PuppiMETType1CorrPtShiftUnclusteredEnDown );
            SetBranchAddress( root, ( name + ".PuppiMETType1CorrPhiShiftJetEnUp" ).c_str(),           &PuppiMETType1CorrPhiShiftJetEnUp );
            SetBranchAddress( root, ( name + ".PuppiMETType1CorrPhiShiftJetEnDown" ).c_str(),         &PuppiMETType1CorrPhiShiftJetEnDown );
            SetBranchAddress( root, ( name + ".PuppiMETType1CorrPhiShiftJetResUp" ).c_str(),          &PuppiMETType1CorrPhiShiftJetResUp );
            SetBranchAddress( root, ( name + ".PuppiMETType1CorrPhiShiftJetResDown" ).c_str(),        &PuppiMETType1CorrPhiShiftJetResDown );
            SetBranchAddress( root, ( name + ".PuppiMETType1CorrPhiShiftUnclusteredEnUp" ).c_str(),   &PuppiMETType1CorrPhiShiftUnclusteredEnUp );
            SetBranchAddress( root, ( name + ".PuppiMETType1CorrPhiShiftUnclusteredEnDown" ).c_str(), &PuppiMETType1CorrPhiShiftUnclusteredEnDown );
            SetBranchAddress( root, ( name + ".PuppiRawMET" ).c_str(),                                &PuppiRawMET );
            SetBranchAddress( root, ( name + ".PuppiRawMETPhi" ).c_str(),                             &PuppiRawMETPhi );
            SetBranchAddress( root, ( name + ".PuppiSumEt" ).c_str(),                                 &PuppiSumEt );
            SetBranchAddress( root, ( name + ".PuppiMETSig" ).c_str(),                                &PuppiMETSig );
            SetBranchAddress( root, ( name + ".PuppiMETlongitudinal" ).c_str(),                       &PuppiMETlongitudinal );
            SetBranchAddress( root, ( name + ".PuppiMETRealSig" ).c_str(),                            &PuppiMETRealSig );
            SetBranchAddress( root, ( name + ".PuppiGenMET" ).c_str(),                                &PuppiGenMET );
            SetBranchAddress( root, ( name + ".PuppiGenMETPhi" ).c_str(),                             &PuppiGenMETPhi );
            SetBranchAddress( root, ( name + ".PuppiMETx" ).c_str(),                                  &PuppiMETx );
            SetBranchAddress( root, ( name + ".PuppiMETy" ).c_str(),                                  &PuppiMETy );
        }
};

class GenInfoBranches {
    public:

        Int_t Size;
        Float_t Pt [ MAX_GENS ];
        Float_t Eta [ MAX_GENS ];
        Float_t Phi [ MAX_GENS ];
        Float_t Mass [ MAX_GENS ];
        Int_t PdgID [ MAX_GENS ];
        Int_t PhotonFlag [ MAX_GENS ];
        Int_t Status [ MAX_GENS ];
        Int_t nMo [ MAX_GENS ];
        Int_t nDa [ MAX_GENS ];
        Int_t Mo1 [ MAX_GENS ];
        Int_t Mo2 [ MAX_GENS ];
        Int_t Da1 [ MAX_GENS ];
        Int_t Da2 [ MAX_GENS ];
        Int_t Mo1PdgID [ MAX_GENS ];
        Int_t Mo2PdgID [ MAX_GENS ];
        Int_t Mo1Status [ MAX_GENS ];
        Int_t Mo2Status [ MAX_GENS ];
        Int_t Da1PdgID [ MAX_GENS ];
        Int_t Da2PdgID [ MAX_GENS ];
        Int_t GrandMo1PdgID [ MAX_GENS ];
        Int_t GrandMo2PdgID [ MAX_GENS ];
        Int_t GrandMo1Status [ MAX_GENS ];
        Int_t GrandMo2Status [ MAX_GENS ];
        Bool_t McIsTZTZ;
        Bool_t McIsTHTH;
        Bool_t McIsTZTH;
        Bool_t McIsTZBW;
        Bool_t McIsTHBW;
        Bool_t McIsBWBW;
        Float_t Weight;
        Int_t   MEPSSize;
        Float_t MEPSWeights[MAX_MEPS];
        Float_t ptHat;
        Int_t PDFid1;
        Int_t PDFid2;
        Float_t PDFx1;
        Float_t PDFx2;
        Float_t PDFscale;
        Float_t PDFv1;
        Float_t PDFv2;
        Float_t LHENominalWeight;
        Float_t LHEOriginalWeight;
        Int_t LHESize;
        Int_t LHESystematicId [ MAX_LHE ];
        Float_t LHESystematicWeights [ MAX_LHE ];

        void RegisterTree( TTree* root, const std::string& name = "GenInfo" )
        {
            root->Branch( ( name + ".Size" ).c_str(),                 &Size,                ( name + "Size/I" ).c_str() );
            root->Branch( ( name + ".Pt" ).c_str(),                   Pt,                   ( name + ".Pt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Eta" ).c_str(),                  Eta,                  ( name + ".Eta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Phi" ).c_str(),                  Phi,                  ( name + ".Phi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Mass" ).c_str(),                 Mass,                 ( name + ".Mass[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PdgID" ).c_str(),                PdgID,                ( name + ".PdgID[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".PhotonFlag" ).c_str(),           PhotonFlag,           ( name + ".PhotonFlag[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Status" ).c_str(),               Status,               ( name + ".Status[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".nMo" ).c_str(),                  nMo,                  ( name + ".nMo[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".nDa" ).c_str(),                  nDa,                  ( name + ".nDa[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Mo1" ).c_str(),                  Mo1,                  ( name + ".Mo1[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Mo2" ).c_str(),                  Mo2,                  ( name + ".Mo2[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Da1" ).c_str(),                  Da1,                  ( name + ".Da1[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Da2" ).c_str(),                  Da2,                  ( name + ".Da2[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Mo1PdgID" ).c_str(),             Mo1PdgID,             ( name + ".Mo1PdgID[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Mo2PdgID" ).c_str(),             Mo2PdgID,             ( name + ".Mo2PdgID[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Mo1Status" ).c_str(),            Mo1Status,            ( name + ".Mo1Status[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Mo2Status" ).c_str(),            Mo2Status,            ( name + ".Mo2Status[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Da1PdgID" ).c_str(),             Da1PdgID,             ( name + ".Da1PdgID[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Da2PdgID" ).c_str(),             Da2PdgID,             ( name + ".Da2PdgID[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".GrandMo1PdgID" ).c_str(),        GrandMo1PdgID,        ( name + ".GrandMo1PdgID[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".GrandMo2PdgID" ).c_str(),        GrandMo2PdgID,        ( name + ".GrandMo2PdgID[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".GrandMo1Status" ).c_str(),       GrandMo1Status,       ( name + ".GrandMo1Status[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".GrandMo2Status" ).c_str(),       GrandMo2Status,       ( name + ".GrandMo2Status[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".McIsTZTZ" ).c_str(),             &McIsTZTZ,            ( name + "McIsTZTZ/O" ).c_str() );
            root->Branch( ( name + ".McIsTHTH" ).c_str(),             &McIsTHTH,            ( name + "McIsTHTH/O" ).c_str() );
            root->Branch( ( name + ".McIsTZTH" ).c_str(),             &McIsTZTH,            ( name + "McIsTZTH/O" ).c_str() );
            root->Branch( ( name + ".McIsTZBW" ).c_str(),             &McIsTZBW,            ( name + "McIsTZBW/O" ).c_str() );
            root->Branch( ( name + ".McIsTHBW" ).c_str(),             &McIsTHBW,            ( name + "McIsTHBW/O" ).c_str() );
            root->Branch( ( name + ".McIsBWBW" ).c_str(),             &McIsBWBW,            ( name + "McIsBWBW/O" ).c_str() );
            root->Branch( ( name + ".Weight" ).c_str(),               &Weight,              ( name + "Weight/F" ).c_str() );
            root->Branch( ( name + ".MEPSSize" ).c_str(),             &MEPSSize,            ( name + "MEPSSize/I" ).c_str() );
            root->Branch( ( name + ".MEPSWeights" ).c_str(),          &MEPSWeights,         ( name + "MEPSWeights[" + name + ".MEPSSize]/F" ).c_str() );
            root->Branch( ( name + ".ptHat" ).c_str(),                &ptHat,               ( name + "ptHat/F" ).c_str() );
            root->Branch( ( name + ".PDFid1" ).c_str(),               &PDFid1,              ( name + "PDFid1/I" ).c_str() );
            root->Branch( ( name + ".PDFid2" ).c_str(),               &PDFid2,              ( name + "PDFid2/I" ).c_str() );
            root->Branch( ( name + ".PDFx1" ).c_str(),                &PDFx1,               ( name + "PDFx1/F" ).c_str() );
            root->Branch( ( name + ".PDFx2" ).c_str(),                &PDFx2,               ( name + "PDFx2/F" ).c_str() );
            root->Branch( ( name + ".PDFscale" ).c_str(),             &PDFscale,            ( name + "PDFscale/F" ).c_str() );
            root->Branch( ( name + ".PDFv1" ).c_str(),                &PDFv1,               ( name + "PDFv1/F" ).c_str() );
            root->Branch( ( name + ".PDFv2" ).c_str(),                &PDFv2,               ( name + "PDFv2/F" ).c_str() );
            root->Branch( ( name + ".LHENominalWeight" ).c_str(),     &LHENominalWeight,    ( name + "LHENominalWeight/F" ).c_str() );
            root->Branch( ( name + ".LHEOriginalWeight" ).c_str(),    &LHEOriginalWeight,   ( name + "LHEOriginalWeight/F" ).c_str() );
            root->Branch( ( name + ".LHESize" ).c_str(),              &LHESize,             ( name + "LHESize/I" ).c_str() );
            root->Branch( ( name + ".LHESystematicId" ).c_str(),      LHESystematicId,      ( name + ".LHESystematicId[" + name + ".LHESize]/I" ).c_str() );
            root->Branch( ( name + ".LHESystematicWeights" ).c_str(), LHESystematicWeights, ( name + ".LHESystematicWeights[" + name + ".LHESize]/F" ).c_str() );
        }

        void Register( TTree* root, const std::string& name = "GenInfo" )
        {
            SetBranchAddress( root, ( name + ".Size" ).c_str(),                 &Size );
            SetBranchAddress( root, ( name + ".Pt" ).c_str(),                   Pt );
            SetBranchAddress( root, ( name + ".Eta" ).c_str(),                  Eta );
            SetBranchAddress( root, ( name + ".Phi" ).c_str(),                  Phi );
            SetBranchAddress( root, ( name + ".Mass" ).c_str(),                 Mass );
            SetBranchAddress( root, ( name + ".PdgID" ).c_str(),                PdgID );
            SetBranchAddress( root, ( name + ".PhotonFlag" ).c_str(),           PhotonFlag );
            SetBranchAddress( root, ( name + ".Status" ).c_str(),               Status );
            SetBranchAddress( root, ( name + ".nMo" ).c_str(),                  nMo );
            SetBranchAddress( root, ( name + ".nDa" ).c_str(),                  nDa );
            SetBranchAddress( root, ( name + ".Mo1" ).c_str(),                  Mo1 );
            SetBranchAddress( root, ( name + ".Mo2" ).c_str(),                  Mo2 );
            SetBranchAddress( root, ( name + ".Da1" ).c_str(),                  Da1 );
            SetBranchAddress( root, ( name + ".Da2" ).c_str(),                  Da2 );
            SetBranchAddress( root, ( name + ".Mo1PdgID" ).c_str(),             Mo1PdgID );
            SetBranchAddress( root, ( name + ".Mo2PdgID" ).c_str(),             Mo2PdgID );
            SetBranchAddress( root, ( name + ".Mo1Status" ).c_str(),            Mo1Status );
            SetBranchAddress( root, ( name + ".Mo2Status" ).c_str(),            Mo2Status );
            SetBranchAddress( root, ( name + ".Da1PdgID" ).c_str(),             Da1PdgID );
            SetBranchAddress( root, ( name + ".Da2PdgID" ).c_str(),             Da2PdgID );
            SetBranchAddress( root, ( name + ".GrandMo1PdgID" ).c_str(),        GrandMo1PdgID );
            SetBranchAddress( root, ( name + ".GrandMo2PdgID" ).c_str(),        GrandMo2PdgID );
            SetBranchAddress( root, ( name + ".GrandMo1Status" ).c_str(),       GrandMo1Status );
            SetBranchAddress( root, ( name + ".GrandMo2Status" ).c_str(),       GrandMo2Status );
            SetBranchAddress( root, ( name + ".McIsTZTZ" ).c_str(),             &McIsTZTZ );
            SetBranchAddress( root, ( name + ".McIsTHTH" ).c_str(),             &McIsTHTH );
            SetBranchAddress( root, ( name + ".McIsTZTH" ).c_str(),             &McIsTZTH );
            SetBranchAddress( root, ( name + ".McIsTZBW" ).c_str(),             &McIsTZBW );
            SetBranchAddress( root, ( name + ".McIsTHBW" ).c_str(),             &McIsTHBW );
            SetBranchAddress( root, ( name + ".McIsBWBW" ).c_str(),             &McIsBWBW );
            SetBranchAddress( root, ( name + ".Weight" ).c_str(),               &Weight );
            SetBranchAddress( root, ( name + ".MEPSSize" ).c_str(),             &MEPSSize );
            SetBranchAddress( root, ( name + ".MEPSWeights" ).c_str(),          MEPSWeights );
            SetBranchAddress( root, ( name + ".ptHat" ).c_str(),                &ptHat );
            SetBranchAddress( root, ( name + ".PDFid1" ).c_str(),               &PDFid1 );
            SetBranchAddress( root, ( name + ".PDFid2" ).c_str(),               &PDFid2 );
            SetBranchAddress( root, ( name + ".PDFx1" ).c_str(),                &PDFx1 );
            SetBranchAddress( root, ( name + ".PDFx2" ).c_str(),                &PDFx2 );
            SetBranchAddress( root, ( name + ".PDFscale" ).c_str(),             &PDFscale );
            SetBranchAddress( root, ( name + ".PDFv1" ).c_str(),                &PDFv1 );
            SetBranchAddress( root, ( name + ".PDFv2" ).c_str(),                &PDFv2 );
            SetBranchAddress( root, ( name + ".LHENominalWeight" ).c_str(),     &LHENominalWeight );
            SetBranchAddress( root, ( name + ".LHEOriginalWeight" ).c_str(),    &LHEOriginalWeight );
            SetBranchAddress( root, ( name + ".LHESize" ).c_str(),              &LHESize );
            SetBranchAddress( root, ( name + ".LHESystematicId" ).c_str(),      LHESystematicId );
            SetBranchAddress( root, ( name + ".LHESystematicWeights" ).c_str(), LHESystematicWeights );
        }
};

class JetInfoBranches {
    public:

        Int_t Size;
        Int_t Index [ MAX_JETS ];
        Int_t NTracks [ MAX_JETS ];
        Float_t Et [ MAX_JETS ];
        Float_t Pt [ MAX_JETS ];
        Float_t Eta [ MAX_JETS ];
        Float_t Phi [ MAX_JETS ];
        Float_t Px [ MAX_JETS ];
        Float_t Py [ MAX_JETS ];
        Float_t Pz [ MAX_JETS ];
        Float_t Energy [ MAX_JETS ];
        Float_t Mass [ MAX_JETS ];
        Float_t Area [ MAX_JETS ];
        Float_t JetCharge [ MAX_JETS ];
        Int_t NConstituents [ MAX_JETS ];
        Float_t Pt_MuonCleaned [ MAX_JETS ];
        Float_t Eta_MuonCleaned [ MAX_JETS ];
        Float_t Phi_MuonCleaned [ MAX_JETS ];
        Float_t Energy_MuonCleaned [ MAX_JETS ];
        Float_t Unc [ MAX_JETS ];
        Float_t JesUnc [ MAX_JETS ];
        Float_t JERPt [ MAX_JETS ];
        Float_t JERPhi [ MAX_JETS ];
        Float_t JERScale [ MAX_JETS ];
        Float_t JERScaleUp [ MAX_JETS ];
        Float_t JERScaleDown [ MAX_JETS ];
        Float_t QGTagsLikelihood [ MAX_JETS ];
        Float_t PUJetIDfullDiscriminant [ MAX_JETS ];
        Int_t PUJetIDcutbased [ MAX_JETS ];
        Int_t NCH [ MAX_JETS ];
        Int_t NNH [ MAX_JETS ];
        Int_t NNHw [ MAX_JETS ];
        Int_t JM [ MAX_JETS ];
        Int_t JMw [ MAX_JETS ];
        Float_t CEF [ MAX_JETS ];
        Float_t CHF [ MAX_JETS ];
        Float_t NEF [ MAX_JETS ];
        Float_t NHF [ MAX_JETS ];
        Float_t MUF [ MAX_JETS ];
        Float_t PtCorrRaw [ MAX_JETS ];
        Float_t PtCorrL2 [ MAX_JETS ];
        Float_t PtCorrL3 [ MAX_JETS ];
        Float_t pfCombinedInclusiveSecondaryVertexV2BJetTags [ MAX_JETS ];
        Float_t pfCombinedMVAV2BJetTags [ MAX_JETS ];
        Float_t pfDeepCSVJetTags_probb [ MAX_JETS ];
        Float_t pfDeepCSVJetTags_probbb [ MAX_JETS ];
        Float_t pfDeepCSVJetTags_probc [ MAX_JETS ];
        Float_t pfDeepCSVJetTags_probudsg [ MAX_JETS ];
        Float_t summaryDeepCSVJetTags_BvsAll [ MAX_JETS ];
        Float_t summaryDeepCSVJetTags_CvsB [ MAX_JETS ];
        Float_t summaryDeepCSVJetTags_CvsL [ MAX_JETS ];
        // Float_t pfDeepFlavourJetTags_probb   [MAX_JETS];
        // Float_t pfDeepFlavourJetTags_probbb  [MAX_JETS];
        // Float_t pfDeepFlavourJetTags_problepb[MAX_JETS];
        // Float_t pfDeepFlavourJetTags_probc   [MAX_JETS];
        // Float_t pfDeepFlavourJetTags_probuds [MAX_JETS];
        // Float_t pfDeepFlavourJetTags_probg   [MAX_JETS];
        Float_t pfBoostedDoubleSecondaryVertexAK8BJetTags [ MAX_JETS ];
        Float_t GenJetPt [ MAX_JETS ];
        Float_t GenJetEta [ MAX_JETS ];
        Float_t GenJetPhi [ MAX_JETS ];
        Float_t GenPt [ MAX_JETS ];
        Float_t GenEta [ MAX_JETS ];
        Float_t GenPhi [ MAX_JETS ];
        Int_t GenPdgID [ MAX_JETS ];
        Int_t GenFlavor [ MAX_JETS ];
        Int_t GenHadronFlavor [ MAX_JETS ];
        Int_t GenMCTag [ MAX_JETS ];
        Int_t NSubjets [ MAX_JETS ];
        Int_t SubjetsIdxStart [ MAX_JETS ];
        Float_t NjettinessAK8tau1 [ MAX_JETS ];
        Float_t NjettinessAK8tau2 [ MAX_JETS ];
        Float_t NjettinessAK8tau3 [ MAX_JETS ];
        Float_t PuppiSoftDrop_ECFb1N2 [ MAX_JETS ];
        Float_t PuppiSoftDrop_ECFb1N3 [ MAX_JETS ];
        Float_t ak8PFJetsCHSSoftDropMass [ MAX_JETS ];
        Float_t ak8PFJetsCHSPrunedMass [ MAX_JETS ];
        Float_t ak8PFJetsCHSTrimmedMass [ MAX_JETS ];
        Float_t ak8PFJetsCHSFilteredMass [ MAX_JETS ];
        Float_t topJetMass [ MAX_JETS ];
        Float_t ca8TopMass [ MAX_JETS ];
        Float_t ca8MinMass [ MAX_JETS ];
        std::vector<Float_t>* SubjetMass;
        std::vector<Float_t>* SubjetPt;
        std::vector<Float_t>* SubjetEt;
        std::vector<Float_t>* SubjetEta;
        std::vector<Float_t>* SubjetPhi;
        std::vector<Float_t>* SubjetArea;
        std::vector<Float_t>* SubjetPtUncorr;
        std::vector<Float_t>* SubjetCombinedSVBJetTags;
        std::vector<Float_t>* SubjetDeepCSVJetTags_probb;
        std::vector<Float_t>* SubjetDeepCSVJetTags_probbb;
        std::vector<Float_t>* SubjetDeepCSVJetTags_probc;
        std::vector<Float_t>* SubjetDeepCSVJetTags_probudsg;
        std::vector<Float_t>* SubjetsummaryDeepCSVJetTags_BvsAll;
        std::vector<Float_t>* SubjetsummaryDeepCSVJetTags_CvsB;
        std::vector<Float_t>* SubjetsummaryDeepCSVJetTags_CvsL;
        std::vector<Float_t>* PuppiSoftDrop_SubjetECFb1N2;
        std::vector<Float_t>* PuppiSoftDrop_SubjetECFb1N3;
        std::vector<Float_t>* SubjetGenPdgId;
        std::vector<Float_t>* SubjetGenFlavour;
        std::vector<Float_t>* SubjetHadronFlavour;
        std::vector<Float_t> SubjetMass_w;
        std::vector<Float_t> SubjetPt_w;
        std::vector<Float_t> SubjetEt_w;
        std::vector<Float_t> SubjetEta_w;
        std::vector<Float_t> SubjetPhi_w;
        std::vector<Float_t> SubjetArea_w;
        std::vector<Float_t> SubjetPtUncorr_w;
        std::vector<Float_t> SubjetCombinedSVBJetTags_w;
        std::vector<Float_t> SubjetDeepCSVJetTags_probb_w;
        std::vector<Float_t> SubjetDeepCSVJetTags_probbb_w;
        std::vector<Float_t> SubjetDeepCSVJetTags_probc_w;
        std::vector<Float_t> SubjetDeepCSVJetTags_probudsg_w;
        std::vector<Float_t> SubjetsummaryDeepCSVJetTags_BvsAll_w;
        std::vector<Float_t> SubjetsummaryDeepCSVJetTags_CvsB_w;
        std::vector<Float_t> SubjetsummaryDeepCSVJetTags_CvsL_w;
        std::vector<Float_t> PuppiSoftDrop_SubjetECFb1N2_w;
        std::vector<Float_t> PuppiSoftDrop_SubjetECFb1N3_w;
        std::vector<Float_t> SubjetGenPdgId_w;
        std::vector<Float_t> SubjetGenFlavour_w;
        std::vector<Float_t> SubjetHadronFlavour_w;
        Float_t TempPt1 [ MAX_JETS ];
        Float_t TempEta1 [ MAX_JETS ];
        Float_t TempPhi1 [ MAX_JETS ];
        Float_t TempEnergy1 [ MAX_JETS ];
        Float_t TempPt2 [ MAX_JETS ];
        Float_t TempEta2 [ MAX_JETS ];
        Float_t TempPhi2 [ MAX_JETS ];
        Float_t TempEnergy2 [ MAX_JETS ];
        Float_t TempFloat1 [ MAX_JETS ];
        Float_t TempFloat2 [ MAX_JETS ];
        Float_t TempFloat3 [ MAX_JETS ];
        Float_t TempFloat4 [ MAX_JETS ];

        void RegisterTree( TTree* root, const std::string& name = "JetInfo" )
        {
            root->Branch( ( name + ".Size" ).c_str(),                                         &Size,                                        ( name + "Size/I" ).c_str() );
            root->Branch( ( name + ".Index" ).c_str(),                                        Index,                                        ( name + ".Index[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".NTracks" ).c_str(),                                      NTracks,                                      ( name + ".NTracks[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Et" ).c_str(),                                           Et,                                           ( name + ".Et[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Pt" ).c_str(),                                           Pt,                                           ( name + ".Pt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Eta" ).c_str(),                                          Eta,                                          ( name + ".Eta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Phi" ).c_str(),                                          Phi,                                          ( name + ".Phi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Px" ).c_str(),                                           Px,                                           ( name + ".Px[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Py" ).c_str(),                                           Py,                                           ( name + ".Py[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Pz" ).c_str(),                                           Pz,                                           ( name + ".Pz[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Energy" ).c_str(),                                       Energy,                                       ( name + ".Energy[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Mass" ).c_str(),                                         Mass,                                         ( name + ".Mass[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Area" ).c_str(),                                         Area,                                         ( name + ".Area[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".JetCharge" ).c_str(),                                    JetCharge,                                    ( name + ".JetCharge[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".NConstituents" ).c_str(),                                NConstituents,                                ( name + ".NConstituents[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Pt_MuonCleaned" ).c_str(),                               Pt_MuonCleaned,                               ( name + ".Pt_MuonCleaned[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Eta_MuonCleaned" ).c_str(),                              Eta_MuonCleaned,                              ( name + ".Eta_MuonCleaned[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Phi_MuonCleaned" ).c_str(),                              Phi_MuonCleaned,                              ( name + ".Phi_MuonCleaned[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Energy_MuonCleaned" ).c_str(),                           Energy_MuonCleaned,                           ( name + ".Energy_MuonCleaned[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Unc" ).c_str(),                                          Unc,                                          ( name + ".Unc[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".JesUnc" ).c_str(),                                       JesUnc,                                       ( name + ".JesUnc[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".JERPt" ).c_str(),                                        JERPt,                                        ( name + ".JERPt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".JERPhi" ).c_str(),                                       JERPhi,                                       ( name + ".JERPhi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".JERScale" ).c_str(),                                     JERScale,                                     ( name + ".JERScale[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".JERScaleUp" ).c_str(),                                   JERScaleUp,                                   ( name + ".JERScaleUp[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".JERScaleDown" ).c_str(),                                 JERScaleDown,                                 ( name + ".JERScaleDown[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".QGTagsLikelihood" ).c_str(),                             QGTagsLikelihood,                             ( name + ".QGTagsLikelihood[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PUJetIDfullDiscriminant" ).c_str(),                      PUJetIDfullDiscriminant,                      ( name + ".PUJetIDfullDiscriminant[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PUJetIDcutbased" ).c_str(),                              PUJetIDcutbased,                              ( name + ".PUJetIDcutbased[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".NCH" ).c_str(),                                          NCH,                                          ( name + ".NCH[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".NNH" ).c_str(),                                          NNH,                                          ( name + ".NNH[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".NNHw" ).c_str(),                                         NNHw,                                         ( name + ".NNHw[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".JM" ).c_str(),                                           JM,                                           ( name + ".JM[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".JMw" ).c_str(),                                          JMw,                                          ( name + ".JMw[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".CEF" ).c_str(),                                          CEF,                                          ( name + ".CEF[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".CHF" ).c_str(),                                          CHF,                                          ( name + ".CHF[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".NEF" ).c_str(),                                          NEF,                                          ( name + ".NEF[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".NHF" ).c_str(),                                          NHF,                                          ( name + ".NHF[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MUF" ).c_str(),                                          MUF,                                          ( name + ".MUF[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PtCorrRaw" ).c_str(),                                    PtCorrRaw,                                    ( name + ".PtCorrRaw[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PtCorrL2" ).c_str(),                                     PtCorrL2,                                     ( name + ".PtCorrL2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PtCorrL3" ).c_str(),                                     PtCorrL3,                                     ( name + ".PtCorrL3[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".pfCombinedInclusiveSecondaryVertexV2BJetTags" ).c_str(), pfCombinedInclusiveSecondaryVertexV2BJetTags, ( name + ".pfCombinedInclusiveSecondaryVertexV2BJetTags[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".pfCombinedMVAV2BJetTags" ).c_str(),                      pfCombinedMVAV2BJetTags,                      ( name + ".pfCombinedMVAV2BJetTags[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".pfDeepCSVJetTags_probb" ).c_str(),                       pfDeepCSVJetTags_probb,                       ( name + ".pfDeepCSVJetTags_probb[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".pfDeepCSVJetTags_probbb" ).c_str(),                      pfDeepCSVJetTags_probbb,                      ( name + ".pfDeepCSVJetTags_probbb[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".pfDeepCSVJetTags_probc" ).c_str(),                       pfDeepCSVJetTags_probc,                       ( name + ".pfDeepCSVJetTags_probc[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".pfDeepCSVJetTags_probudsg" ).c_str(),                    pfDeepCSVJetTags_probudsg,                    ( name + ".pfDeepCSVJetTags_probudsg[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".summaryDeepCSVJetTags_BvsAll" ).c_str(),                 summaryDeepCSVJetTags_BvsAll,                 ( name + ".summaryDeepCSVJetTags_BvsAll[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".summaryDeepCSVJetTags_CvsB" ).c_str(),                   summaryDeepCSVJetTags_CvsB,                   ( name + ".summaryDeepCSVJetTags_CvsB[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".summaryDeepCSVJetTags_CvsL" ).c_str(),                   summaryDeepCSVJetTags_CvsL,                   ( name + ".summaryDeepCSVJetTags_CvsL[" + name + ".Size]/F" ).c_str() );
            // root->Branch( ( name+".pfDeepFlavourJetTags_probb" ).c_str(),                   pfDeepFlavourJetTags_probb,                   ( name+".pfDeepFlavourJetTags_probb["+name+".Size]/F" ).c_str() );
            // root->Branch( ( name+".pfDeepFlavourJetTags_probbb" ).c_str(),                  pfDeepFlavourJetTags_probbb,                  ( name+".pfDeepFlavourJetTags_probbb["+name+".Size]/F" ).c_str() );
            // root->Branch( ( name+".pfDeepFlavourJetTags_problepb" ).c_str(),                pfDeepFlavourJetTags_problepb,                ( name+".pfDeepFlavourJetTags_problepb["+name+".Size]/F" ).c_str() );
            // root->Branch( ( name+".pfDeepFlavourJetTags_probc" ).c_str(),                   pfDeepFlavourJetTags_probc,                   ( name+".pfDeepFlavourJetTags_probc["+name+".Size]/F" ).c_str() );
            // root->Branch( ( name+".pfDeepFlavourJetTags_probuds" ).c_str(),                 pfDeepFlavourJetTags_probuds,                 ( name+".pfDeepFlavourJetTags_probuds["+name+".Size]/F" ).c_str() );
            // root->Branch( ( name+".pfDeepFlavourJetTags_probg" ).c_str(),                   pfDeepFlavourJetTags_probg,                   ( name+".pfDeepFlavourJetTags_probg["+name+".Size]/F" ).c_str() );
            root->Branch( ( name + ".pfBoostedDoubleSecondaryVertexAK8BJetTags" ).c_str(), pfBoostedDoubleSecondaryVertexAK8BJetTags, ( name + ".pfBoostedDoubleSecondaryVertexAK8BJetTags[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenJetPt" ).c_str(),                                  GenJetPt,                                  ( name + ".GenJetPt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenJetEta" ).c_str(),                                 GenJetEta,                                 ( name + ".GenJetEta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenJetPhi" ).c_str(),                                 GenJetPhi,                                 ( name + ".GenJetPhi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenPt" ).c_str(),                                     GenPt,                                     ( name + ".GenPt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenEta" ).c_str(),                                    GenEta,                                    ( name + ".GenEta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenPhi" ).c_str(),                                    GenPhi,                                    ( name + ".GenPhi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenPdgID" ).c_str(),                                  GenPdgID,                                  ( name + ".GenPdgID[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".GenFlavor" ).c_str(),                                 GenFlavor,                                 ( name + ".GenFlavor[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".GenHadronFlavor" ).c_str(),                           GenHadronFlavor,                           ( name + ".GenHadronFlavor[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".GenMCTag" ).c_str(),                                  GenMCTag,                                  ( name + ".GenMCTag[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".NSubjets" ).c_str(),                                  NSubjets,                                  ( name + ".NSubjets[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".SubjetsIdxStart" ).c_str(),                           SubjetsIdxStart,                           ( name + ".SubjetsIdxStart[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".NjettinessAK8tau1" ).c_str(),                         NjettinessAK8tau1,                         ( name + ".NjettinessAK8tau1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".NjettinessAK8tau2" ).c_str(),                         NjettinessAK8tau2,                         ( name + ".NjettinessAK8tau2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".NjettinessAK8tau3" ).c_str(),                         NjettinessAK8tau3,                         ( name + ".NjettinessAK8tau3[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PuppiSoftDrop_ECFb1N2" ).c_str(),                     PuppiSoftDrop_ECFb1N2,                     ( name + ".PuppiSoftDrop_ECFb1N2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PuppiSoftDrop_ECFb1N3" ).c_str(),                     PuppiSoftDrop_ECFb1N3,                     ( name + ".PuppiSoftDrop_ECFb1N3[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ak8PFJetsCHSSoftDropMass" ).c_str(),                  ak8PFJetsCHSSoftDropMass,                  ( name + ".ak8PFJetsCHSSoftDropMass[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ak8PFJetsCHSPrunedMass" ).c_str(),                    ak8PFJetsCHSPrunedMass,                    ( name + ".ak8PFJetsCHSPrunedMass[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ak8PFJetsCHSTrimmedMass" ).c_str(),                   ak8PFJetsCHSTrimmedMass,                   ( name + ".ak8PFJetsCHSTrimmedMass[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ak8PFJetsCHSFilteredMass" ).c_str(),                  ak8PFJetsCHSFilteredMass,                  ( name + ".ak8PFJetsCHSFilteredMass[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".topJetMass" ).c_str(),                                topJetMass,                                ( name + ".topJetMass[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ca8TopMass" ).c_str(),                                ca8TopMass,                                ( name + ".ca8TopMass[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ca8MinMass" ).c_str(),                                ca8MinMass,                                ( name + ".ca8MinMass[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".SubjetMass" ).c_str(),                                &SubjetMass_w );
            root->Branch( ( name + ".SubjetPt" ).c_str(),                                  &SubjetPt_w );
            root->Branch( ( name + ".SubjetEt" ).c_str(),                                  &SubjetEt_w );
            root->Branch( ( name + ".SubjetEta" ).c_str(),                                 &SubjetEta_w );
            root->Branch( ( name + ".SubjetPhi" ).c_str(),                                 &SubjetPhi_w );
            root->Branch( ( name + ".SubjetArea" ).c_str(),                                &SubjetArea_w );
            root->Branch( ( name + ".SubjetPtUncorr" ).c_str(),                            &SubjetPtUncorr_w );
            root->Branch( ( name + ".SubjetCombinedSVBJetTags" ).c_str(),                  &SubjetCombinedSVBJetTags_w );
            root->Branch( ( name + ".SubjetDeepCSVJetTags_probb" ).c_str(),                &SubjetDeepCSVJetTags_probb_w );
            root->Branch( ( name + ".SubjetDeepCSVJetTags_probbb" ).c_str(),               &SubjetDeepCSVJetTags_probbb_w );
            root->Branch( ( name + ".SubjetDeepCSVJetTags_probc" ).c_str(),                &SubjetDeepCSVJetTags_probc_w );
            root->Branch( ( name + ".SubjetDeepCSVJetTags_probudsg" ).c_str(),             &SubjetDeepCSVJetTags_probudsg_w );
            root->Branch( ( name + ".SubjetsummaryDeepCSVJetTags_BvsAll" ).c_str(),        &SubjetsummaryDeepCSVJetTags_BvsAll_w );
            root->Branch( ( name + ".SubjetsummaryDeepCSVJetTags_CvsB" ).c_str(),          &SubjetsummaryDeepCSVJetTags_CvsB_w );
            root->Branch( ( name + ".SubjetsummaryDeepCSVJetTags_CvsL" ).c_str(),          &SubjetsummaryDeepCSVJetTags_CvsL_w );
            root->Branch( ( name + ".PuppiSoftDrop_SubjetECFb1N2" ).c_str(),               &PuppiSoftDrop_SubjetECFb1N2_w );
            root->Branch( ( name + ".PuppiSoftDrop_SubjetECFb1N3" ).c_str(),               &PuppiSoftDrop_SubjetECFb1N3_w );
            root->Branch( ( name + ".SubjetGenPdgId" ).c_str(),                            &SubjetGenPdgId_w );
            root->Branch( ( name + ".SubjetGenFlavour" ).c_str(),                          &SubjetGenFlavour_w );
            root->Branch( ( name + ".SubjetHadronFlavour" ).c_str(),                       &SubjetHadronFlavour_w );
            root->Branch( ( name + ".TempPt1" ).c_str(),                                   TempPt1,     ( name + ".TempPt1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempEta1" ).c_str(),                                  TempEta1,    ( name + ".TempEta1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempPhi1" ).c_str(),                                  TempPhi1,    ( name + ".TempPhi1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempEnergy1" ).c_str(),                               TempEnergy1, ( name + ".TempEnergy1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempPt2" ).c_str(),                                   TempPt2,     ( name + ".TempPt2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempEta2" ).c_str(),                                  TempEta2,    ( name + ".TempEta2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempPhi2" ).c_str(),                                  TempPhi2,    ( name + ".TempPhi2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempEnergy2" ).c_str(),                               TempEnergy2, ( name + ".TempEnergy2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempFloat1" ).c_str(),                                TempFloat1,  ( name + ".TempFloat1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempFloat2" ).c_str(),                                TempFloat2,  ( name + ".TempFloat2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempFloat3" ).c_str(),                                TempFloat3,  ( name + ".TempFloat3[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempFloat4" ).c_str(),                                TempFloat4,  ( name + ".TempFloat4[" + name + ".Size]/F" ).c_str() );
        }

        void Register( TTree* root, const std::string& name = "JetInfo" )
        {
            SetBranchAddress( root, ( name + ".Size" ).c_str(),                                         &Size );
            SetBranchAddress( root, ( name + ".Index" ).c_str(),                                        Index );
            SetBranchAddress( root, ( name + ".NTracks" ).c_str(),                                      NTracks );
            SetBranchAddress( root, ( name + ".Et" ).c_str(),                                           Et );
            SetBranchAddress( root, ( name + ".Pt" ).c_str(),                                           Pt );
            SetBranchAddress( root, ( name + ".Eta" ).c_str(),                                          Eta );
            SetBranchAddress( root, ( name + ".Phi" ).c_str(),                                          Phi );
            SetBranchAddress( root, ( name + ".Px" ).c_str(),                                           Px );
            SetBranchAddress( root, ( name + ".Py" ).c_str(),                                           Py );
            SetBranchAddress( root, ( name + ".Pz" ).c_str(),                                           Pz );
            SetBranchAddress( root, ( name + ".Energy" ).c_str(),                                       Energy );
            SetBranchAddress( root, ( name + ".Mass" ).c_str(),                                         Mass );
            SetBranchAddress( root, ( name + ".Area" ).c_str(),                                         Area );
            SetBranchAddress( root, ( name + ".JetCharge" ).c_str(),                                    JetCharge );
            SetBranchAddress( root, ( name + ".NConstituents" ).c_str(),                                NConstituents );
            SetBranchAddress( root, ( name + ".Pt_MuonCleaned" ).c_str(),                               Pt_MuonCleaned );
            SetBranchAddress( root, ( name + ".Eta_MuonCleaned" ).c_str(),                              Eta_MuonCleaned );
            SetBranchAddress( root, ( name + ".Phi_MuonCleaned" ).c_str(),                              Phi_MuonCleaned );
            SetBranchAddress( root, ( name + ".Energy_MuonCleaned" ).c_str(),                           Energy_MuonCleaned );
            SetBranchAddress( root, ( name + ".Unc" ).c_str(),                                          Unc );
            SetBranchAddress( root, ( name + ".JesUnc" ).c_str(),                                       JesUnc );
            SetBranchAddress( root, ( name + ".JERPt" ).c_str(),                                        JERPt );
            SetBranchAddress( root, ( name + ".JERPhi" ).c_str(),                                       JERPhi );
            SetBranchAddress( root, ( name + ".JERScale" ).c_str(),                                     JERScale );
            SetBranchAddress( root, ( name + ".JERScaleUp" ).c_str(),                                   JERScaleUp );
            SetBranchAddress( root, ( name + ".JERScaleDown" ).c_str(),                                 JERScaleDown );
            SetBranchAddress( root, ( name + ".QGTagsLikelihood" ).c_str(),                             QGTagsLikelihood );
            SetBranchAddress( root, ( name + ".PUJetIDfullDiscriminant" ).c_str(),                      PUJetIDfullDiscriminant );
            SetBranchAddress( root, ( name + ".PUJetIDcutbased" ).c_str(),                              PUJetIDcutbased );
            SetBranchAddress( root, ( name + ".NCH" ).c_str(),                                          NCH );
            SetBranchAddress( root, ( name + ".NNH" ).c_str(),                                          NNH );
            SetBranchAddress( root, ( name + ".NNHw" ).c_str(),                                         NNHw );
            SetBranchAddress( root, ( name + ".JM" ).c_str(),                                           JM );
            SetBranchAddress( root, ( name + ".JMw" ).c_str(),                                          JMw );
            SetBranchAddress( root, ( name + ".CEF" ).c_str(),                                          CEF );
            SetBranchAddress( root, ( name + ".CHF" ).c_str(),                                          CHF );
            SetBranchAddress( root, ( name + ".NEF" ).c_str(),                                          NEF );
            SetBranchAddress( root, ( name + ".NHF" ).c_str(),                                          NHF );
            SetBranchAddress( root, ( name + ".MUF" ).c_str(),                                          MUF );
            SetBranchAddress( root, ( name + ".PtCorrRaw" ).c_str(),                                    PtCorrRaw );
            SetBranchAddress( root, ( name + ".PtCorrL2" ).c_str(),                                     PtCorrL2 );
            SetBranchAddress( root, ( name + ".PtCorrL3" ).c_str(),                                     PtCorrL3 );
            SetBranchAddress( root, ( name + ".pfCombinedInclusiveSecondaryVertexV2BJetTags" ).c_str(), pfCombinedInclusiveSecondaryVertexV2BJetTags );
            SetBranchAddress( root, ( name + ".pfCombinedMVAV2BJetTags" ).c_str(),                      pfCombinedMVAV2BJetTags );
            SetBranchAddress( root, ( name + ".pfDeepCSVJetTags_probb" ).c_str(),                       pfDeepCSVJetTags_probb );
            SetBranchAddress( root, ( name + ".pfDeepCSVJetTags_probbb" ).c_str(),                      pfDeepCSVJetTags_probbb );
            SetBranchAddress( root, ( name + ".pfDeepCSVJetTags_probc" ).c_str(),                       pfDeepCSVJetTags_probc );
            SetBranchAddress( root, ( name + ".pfDeepCSVJetTags_probudsg" ).c_str(),                    pfDeepCSVJetTags_probudsg );
            SetBranchAddress( root, ( name + ".summaryDeepCSVJetTags_BvsAll" ).c_str(),                 summaryDeepCSVJetTags_BvsAll );
            SetBranchAddress( root, ( name + ".summaryDeepCSVJetTags_CvsB" ).c_str(),                   summaryDeepCSVJetTags_CvsB );
            SetBranchAddress( root, ( name + ".summaryDeepCSVJetTags_CvsL" ).c_str(),                   summaryDeepCSVJetTags_CvsL );
            // root->SetBranchAddress( ( name+".pfDeepFlavourJetTags_probb" ).c_str(),                   pfDeepFlavourJetTags_probb );
            // root->SetBranchAddress( ( name+".pfDeepFlavourJetTags_probbb" ).c_str(),                  pfDeepFlavourJetTags_probbb );
            // root->SetBranchAddress( ( name+".pfDeepFlavourJetTags_problepb" ).c_str(),                pfDeepFlavourJetTags_problepb );
            // root->SetBranchAddress( ( name+".pfDeepFlavourJetTags_probc" ).c_str(),                   pfDeepFlavourJetTags_probc );
            // root->SetBranchAddress( ( name+".pfDeepFlavourJetTags_probuds" ).c_str(),                 pfDeepFlavourJetTags_probuds );
            // root->SetBranchAddress( ( name+".pfDeepFlavourJetTags_probg" ).c_str(),                   pfDeepFlavourJetTags_probg );
            SetBranchAddress( root, ( name + ".pfBoostedDoubleSecondaryVertexAK8BJetTags" ).c_str(), pfBoostedDoubleSecondaryVertexAK8BJetTags );
            SetBranchAddress( root, ( name + ".GenJetPt" ).c_str(),                                  GenJetPt );
            SetBranchAddress( root, ( name + ".GenJetEta" ).c_str(),                                 GenJetEta );
            SetBranchAddress( root, ( name + ".GenJetPhi" ).c_str(),                                 GenJetPhi );
            SetBranchAddress( root, ( name + ".GenPt" ).c_str(),                                     GenPt );
            SetBranchAddress( root, ( name + ".GenEta" ).c_str(),                                    GenEta );
            SetBranchAddress( root, ( name + ".GenPhi" ).c_str(),                                    GenPhi );
            SetBranchAddress( root, ( name + ".GenPdgID" ).c_str(),                                  GenPdgID );
            SetBranchAddress( root, ( name + ".GenFlavor" ).c_str(),                                 GenFlavor );
            SetBranchAddress( root, ( name + ".GenHadronFlavor" ).c_str(),                           GenHadronFlavor );
            SetBranchAddress( root, ( name + ".GenMCTag" ).c_str(),                                  GenMCTag );
            SetBranchAddress( root, ( name + ".NSubjets" ).c_str(),                                  NSubjets );
            SetBranchAddress( root, ( name + ".SubjetsIdxStart" ).c_str(),                           SubjetsIdxStart );
            SetBranchAddress( root, ( name + ".NjettinessAK8tau1" ).c_str(),                         NjettinessAK8tau1 );
            SetBranchAddress( root, ( name + ".NjettinessAK8tau2" ).c_str(),                         NjettinessAK8tau2 );
            SetBranchAddress( root, ( name + ".NjettinessAK8tau3" ).c_str(),                         NjettinessAK8tau3 );
            SetBranchAddress( root, ( name + ".PuppiSoftDrop_ECFb1N2" ).c_str(),                     PuppiSoftDrop_ECFb1N2 );
            SetBranchAddress( root, ( name + ".PuppiSoftDrop_ECFb1N3" ).c_str(),                     PuppiSoftDrop_ECFb1N3 );
            SetBranchAddress( root, ( name + ".ak8PFJetsCHSSoftDropMass" ).c_str(),                  ak8PFJetsCHSSoftDropMass );
            SetBranchAddress( root, ( name + ".ak8PFJetsCHSPrunedMass" ).c_str(),                    ak8PFJetsCHSPrunedMass );
            SetBranchAddress( root, ( name + ".ak8PFJetsCHSTrimmedMass" ).c_str(),                   ak8PFJetsCHSTrimmedMass );
            SetBranchAddress( root, ( name + ".ak8PFJetsCHSFilteredMass" ).c_str(),                  ak8PFJetsCHSFilteredMass );
            SetBranchAddress( root, ( name + ".topJetMass" ).c_str(),                                topJetMass );
            SetBranchAddress( root, ( name + ".ca8TopMass" ).c_str(),                                ca8TopMass );
            SetBranchAddress( root, ( name + ".ca8MinMass" ).c_str(),                                ca8MinMass );
            SubjetMass                         = 0;
            SubjetPt                           = 0;
            SubjetEt                           = 0;
            SubjetEta                          = 0;
            SubjetPhi                          = 0;
            SubjetArea                         = 0;
            SubjetPtUncorr                     = 0;
            SubjetCombinedSVBJetTags           = 0;
            SubjetDeepCSVJetTags_probb         = 0;
            SubjetDeepCSVJetTags_probbb        = 0;
            SubjetDeepCSVJetTags_probc         = 0;
            SubjetDeepCSVJetTags_probudsg      = 0;
            SubjetsummaryDeepCSVJetTags_BvsAll = 0;
            SubjetsummaryDeepCSVJetTags_CvsB   = 0;
            SubjetsummaryDeepCSVJetTags_CvsL   = 0;
            PuppiSoftDrop_SubjetECFb1N2        = 0;
            PuppiSoftDrop_SubjetECFb1N3        = 0;
            SubjetGenPdgId                     = 0;
            SubjetGenFlavour                   = 0;
            SubjetHadronFlavour                = 0;
            SetBranchAddress( root, ( name + ".SubjetMass" ).c_str(),                         &SubjetMass );
            SetBranchAddress( root, ( name + ".SubjetPt" ).c_str(),                           &SubjetPt );
            SetBranchAddress( root, ( name + ".SubjetEt" ).c_str(),                           &SubjetEt );
            SetBranchAddress( root, ( name + ".SubjetEta" ).c_str(),                          &SubjetEta );
            SetBranchAddress( root, ( name + ".SubjetPhi" ).c_str(),                          &SubjetPhi );
            SetBranchAddress( root, ( name + ".SubjetArea" ).c_str(),                         &SubjetArea );
            SetBranchAddress( root, ( name + ".SubjetPtUncorr" ).c_str(),                     &SubjetPtUncorr );
            SetBranchAddress( root, ( name + ".SubjetCombinedSVBJetTags" ).c_str(),           &SubjetCombinedSVBJetTags );
            SetBranchAddress( root, ( name + ".SubjetDeepCSVJetTags_probb" ).c_str(),         &SubjetDeepCSVJetTags_probb );
            SetBranchAddress( root, ( name + ".SubjetDeepCSVJetTags_probbb" ).c_str(),        &SubjetDeepCSVJetTags_probbb );
            SetBranchAddress( root, ( name + ".SubjetDeepCSVJetTags_probc" ).c_str(),         &SubjetDeepCSVJetTags_probc );
            SetBranchAddress( root, ( name + ".SubjetDeepCSVJetTags_probudsg" ).c_str(),      &SubjetDeepCSVJetTags_probudsg );
            SetBranchAddress( root, ( name + ".SubjetsummaryDeepCSVJetTags_BvsAll" ).c_str(), &SubjetsummaryDeepCSVJetTags_BvsAll );
            SetBranchAddress( root, ( name + ".SubjetsummaryDeepCSVJetTags_CvsB" ).c_str(),   &SubjetsummaryDeepCSVJetTags_CvsB );
            SetBranchAddress( root, ( name + ".SubjetsummaryDeepCSVJetTags_CvsL" ).c_str(),   &SubjetsummaryDeepCSVJetTags_CvsL );
            SetBranchAddress( root, ( name + ".PuppiSoftDrop_SubjetECFb1N2" ).c_str(),        &PuppiSoftDrop_SubjetECFb1N2 );
            SetBranchAddress( root, ( name + ".PuppiSoftDrop_SubjetECFb1N3" ).c_str(),        &PuppiSoftDrop_SubjetECFb1N3 );
            SetBranchAddress( root, ( name + ".SubjetGenPdgId" ).c_str(),                     &SubjetGenPdgId );
            SetBranchAddress( root, ( name + ".SubjetGenFlavour" ).c_str(),                   &SubjetGenFlavour );
            SetBranchAddress( root, ( name + ".SubjetHadronFlavour" ).c_str(),                &SubjetHadronFlavour );
            SetBranchAddress( root, ( name + ".TempPt1" ).c_str(),                            TempPt1 );
            SetBranchAddress( root, ( name + ".TempEta1" ).c_str(),                           TempEta1 );
            SetBranchAddress( root, ( name + ".TempPhi1" ).c_str(),                           TempPhi1 );
            SetBranchAddress( root, ( name + ".TempEnergy1" ).c_str(),                        TempEnergy1 );
            SetBranchAddress( root, ( name + ".TempPt2" ).c_str(),                            TempPt2 );
            SetBranchAddress( root, ( name + ".TempEta2" ).c_str(),                           TempEta2 );
            SetBranchAddress( root, ( name + ".TempPhi2" ).c_str(),                           TempPhi2 );
            SetBranchAddress( root, ( name + ".TempEnergy2" ).c_str(),                        TempEnergy2 );
            SetBranchAddress( root, ( name + ".TempFloat1" ).c_str(),                         TempFloat1 );
            SetBranchAddress( root, ( name + ".TempFloat2" ).c_str(),                         TempFloat2 );
            SetBranchAddress( root, ( name + ".TempFloat3" ).c_str(),                         TempFloat3 );
            SetBranchAddress( root, ( name + ".TempFloat4" ).c_str(),                         TempFloat4 );
        }
};

class LepInfoBranches {
    public:

        Int_t Size;
        Int_t Index [ MAX_LEPTONS ];
        Int_t LeptonType [ MAX_LEPTONS ];
        Int_t Charge [ MAX_LEPTONS ];
        Float_t Pt [ MAX_LEPTONS ];
        Float_t Et [ MAX_LEPTONS ];
        Float_t Eta [ MAX_LEPTONS ];
        Float_t Phi [ MAX_LEPTONS ];
        Float_t Px [ MAX_LEPTONS ];
        Float_t Py [ MAX_LEPTONS ];
        Float_t Pz [ MAX_LEPTONS ];
        Float_t Energy [ MAX_LEPTONS ];
        Float_t TrackerBasedIsoR03 [ MAX_LEPTONS ];
        Float_t EcalBasedIsoR03 [ MAX_LEPTONS ];
        Float_t HcalBasedIsoR03 [ MAX_LEPTONS ];
        Float_t ChargedHadronIsoR03 [ MAX_LEPTONS ];
        Float_t NeutralHadronIsoR03 [ MAX_LEPTONS ];
        Float_t PhotonIsoR03 [ MAX_LEPTONS ];
        Float_t sumPUPtR03 [ MAX_LEPTONS ];
        Float_t PFIsoRhoCorrR03 [ MAX_LEPTONS ];
        Float_t ChargedHadronIsoR04 [ MAX_LEPTONS ];
        Float_t NeutralHadronIsoR04 [ MAX_LEPTONS ];
        Float_t PhotonIsoR04 [ MAX_LEPTONS ];
        Float_t sumPUPtR04 [ MAX_LEPTONS ];
        Float_t PFIsoDeltaBetaCorrR04 [ MAX_LEPTONS ];
        Float_t EcalPFIsoRhoCorr2016 [ MAX_LEPTONS ];
        Float_t HcalPFIsoRhoCorr2016 [ MAX_LEPTONS ];
        Float_t Ip3dPV [ MAX_LEPTONS ];
        Float_t Ip3dPVErr [ MAX_LEPTONS ];
        Float_t Ip3dPVSignificance [ MAX_LEPTONS ];
        Float_t MiniIso [ MAX_LEPTONS ];
        Int_t MuType [ MAX_LEPTONS ];
        Bool_t isPFMuon [ MAX_LEPTONS ];
        Bool_t MuonCutBasedMuIdLOOSE [ MAX_LEPTONS ];
        Bool_t MuonCutBasedMuIdMEDIUM [ MAX_LEPTONS ];
        Bool_t MuonCutBasedMuIdTIGHT [ MAX_LEPTONS ];
        Bool_t MuonCutBasedIdGlobalHighPt [ MAX_LEPTONS ];
        Bool_t MuonCutBasedIdTrkHighPt [ MAX_LEPTONS ];
        Bool_t isGoodMuonTMOneStationTight [ MAX_LEPTONS ];
        Bool_t isGoodMuonGlobalMuonPromptTight [ MAX_LEPTONS ];
        Float_t MuInnerPt [ MAX_LEPTONS ];
        Float_t MuInnerEta [ MAX_LEPTONS ];
        Float_t MuInnerPhi [ MAX_LEPTONS ];
        Float_t MuInnerPtError [ MAX_LEPTONS ];
        Float_t innerTracknormalizedChi2 [ MAX_LEPTONS ];
        Float_t MuInnerTrackDz [ MAX_LEPTONS ];
        Float_t MuInnerTrackDxy [ MAX_LEPTONS ];
        Float_t MuInnerTrackVHitFrac [ MAX_LEPTONS ];
        Bool_t MuInnerTrackHighPurity [ MAX_LEPTONS ];
        Int_t MuInnerTrackNHits [ MAX_LEPTONS ];
        Int_t MuNTrackerHits [ MAX_LEPTONS ];
        Int_t MuNPixelLayers [ MAX_LEPTONS ];
        Int_t MuNPixelLayersWMeasurement [ MAX_LEPTONS ];
        Int_t MuNTrackLayersWMeasurement [ MAX_LEPTONS ];
        Float_t MuGlobalPt [ MAX_LEPTONS ];
        Float_t MuGlobalEta [ MAX_LEPTONS ];
        Float_t MuGlobalPhi [ MAX_LEPTONS ];
        Float_t MuGlobalPtError [ MAX_LEPTONS ];
        Float_t MuGlobalNormalizedChi2 [ MAX_LEPTONS ];
        Int_t MuNMuonhits [ MAX_LEPTONS ];
        Int_t MuDThits [ MAX_LEPTONS ];
        Int_t MuCSChits [ MAX_LEPTONS ];
        Int_t MuRPChits [ MAX_LEPTONS ];
        Float_t MuSegCompatibility [ MAX_LEPTONS ];
        Float_t MuSTATKMatchingChi2 [ MAX_LEPTONS ];
        Float_t MuInnerTrackKinkVal [ MAX_LEPTONS ];
        Int_t MuStationMask [ MAX_LEPTONS ];
        Int_t MuNMatchedStations [ MAX_LEPTONS ];
        Int_t MuExpectedNMatchedStations [ MAX_LEPTONS ];
        Int_t MuBestTrackType [ MAX_LEPTONS ];
        Float_t MuBestTrackPt [ MAX_LEPTONS ];
        Float_t MuBestTrackEta [ MAX_LEPTONS ];
        Float_t MuBestTrackPhi [ MAX_LEPTONS ];
        Float_t MuBestTrackPtError [ MAX_LEPTONS ];
        Float_t MuBestTrackDz [ MAX_LEPTONS ];
        Float_t MuBestTrackDxy [ MAX_LEPTONS ];
        Int_t MuBestTrackNMuonhits [ MAX_LEPTONS ];
        Int_t MuTunePBestTrackType [ MAX_LEPTONS ];
        Float_t MuTunePBestTrackPt [ MAX_LEPTONS ];
        Float_t MuTunePBestTrackEta [ MAX_LEPTONS ];
        Float_t MuTunePBestTrackPhi [ MAX_LEPTONS ];
        Float_t MuTunePBestTrackPtError [ MAX_LEPTONS ];
        Float_t MuTunePBestTrackDz [ MAX_LEPTONS ];
        Float_t MuTunePBestTrackDxy [ MAX_LEPTONS ];
        Int_t MuTunePBestTrackNMuonhits [ MAX_LEPTONS ];
        Int_t MuontimenDof [ MAX_LEPTONS ];
        Float_t MuontimeAtIpInOut [ MAX_LEPTONS ];
        Float_t MuontimeAtIpOutIn [ MAX_LEPTONS ];
        Int_t Muondirection [ MAX_LEPTONS ];
        Bool_t isPFElectron [ MAX_LEPTONS ];
        Float_t ElEnergyCorrFactor [ MAX_LEPTONS ];
        Float_t ElEnergyPreCorrErr [ MAX_LEPTONS ];
        Float_t ElEnergyPostCorrErr [ MAX_LEPTONS ];
        Float_t ElEnergyPostCorrScaleUp [ MAX_LEPTONS ];
        Float_t ElEnergyPostCorrScaleDown [ MAX_LEPTONS ];
        Float_t ElEnergyPostCorrSmearUp [ MAX_LEPTONS ];
        Float_t ElEnergyPostCorrSmearDown [ MAX_LEPTONS ];
        Bool_t EgammaCutBasedEleIdVETO [ MAX_LEPTONS ];
        Bool_t EgammaCutBasedEleIdLOOSE [ MAX_LEPTONS ];
        Bool_t EgammaCutBasedEleIdMEDIUM [ MAX_LEPTONS ];
        Bool_t EgammaCutBasedEleIdTIGHT [ MAX_LEPTONS ];
        Bool_t EgammaCutBasedEleIdHEEP [ MAX_LEPTONS ];
        Float_t EtaSC [ MAX_LEPTONS ];
        Float_t PhiSC [ MAX_LEPTONS ];
        Float_t rawEnergySC [ MAX_LEPTONS ];
        Float_t EnergySC [ MAX_LEPTONS ];
        Float_t ESEnergySC [ MAX_LEPTONS ];
        Float_t R9 [ MAX_LEPTONS ];
        Float_t E1x5 [ MAX_LEPTONS ];
        Float_t E2x5Max [ MAX_LEPTONS ];
        Float_t E5x5 [ MAX_LEPTONS ];
        Float_t SigmaIetaIeta [ MAX_LEPTONS ];
        Float_t SigmaIetaIphi [ MAX_LEPTONS ];
        Float_t SigmaIphiIphi [ MAX_LEPTONS ];
        Float_t EtaWidth [ MAX_LEPTONS ];
        Float_t PhiWidth [ MAX_LEPTONS ];
        Float_t ElHadoverEm [ MAX_LEPTONS ];
        Float_t HcalDepth1Iso [ MAX_LEPTONS ];
        Float_t HcalDepth2Iso [ MAX_LEPTONS ];
        Float_t HEEPTrackIso [ MAX_LEPTONS ];
        Float_t EgammaMVANonTrig [ MAX_LEPTONS ];
        Float_t EgammaMVATrig [ MAX_LEPTONS ];
        Int_t isEcalDriven [ MAX_LEPTONS ];
        Int_t isTrackerDriven [ MAX_LEPTONS ];
        Int_t ElTightCharge [ MAX_LEPTONS ];
        Float_t ElMomentum [ MAX_LEPTONS ];
        Float_t ElMomentumErr [ MAX_LEPTONS ];
        Float_t ElTrackPt [ MAX_LEPTONS ];
        Float_t ElTrackEta [ MAX_LEPTONS ];
        Float_t ElTrackPhi [ MAX_LEPTONS ];
        Float_t ElTrackDz [ MAX_LEPTONS ];
        Float_t ElTrackDxy [ MAX_LEPTONS ];
        Float_t ElTrackNormalizedChi2 [ MAX_LEPTONS ];
        Int_t ElNTrackLayersWMeasurement [ MAX_LEPTONS ];
        Int_t ElTrackNHits [ MAX_LEPTONS ];
        Int_t NumberOfExpectedInnerHits [ MAX_LEPTONS ];
        Int_t ElClassification [ MAX_LEPTONS ];
        Float_t ElFBrem [ MAX_LEPTONS ];
        Int_t ElNumberOfBrems [ MAX_LEPTONS ];
        Bool_t ElhasConv [ MAX_LEPTONS ];
        Float_t ElEcalE [ MAX_LEPTONS ];
        Float_t ElEnergyErr [ MAX_LEPTONS ];
        Float_t ElEoverP [ MAX_LEPTONS ];
        Float_t EldeltaEta [ MAX_LEPTONS ];
        Float_t EldeltaPhi [ MAX_LEPTONS ];
        Float_t EldeltaPhiSeed [ MAX_LEPTONS ];
        Int_t isPFTau [ MAX_LEPTONS ];
        Float_t GenPt [ MAX_LEPTONS ];
        Float_t GenEta [ MAX_LEPTONS ];
        Float_t GenPhi [ MAX_LEPTONS ];
        Int_t GenPdgID [ MAX_LEPTONS ];
        Int_t GenMCTag [ MAX_LEPTONS ];
        Float_t TempPt1 [ MAX_LEPTONS ];
        Float_t TempEta1 [ MAX_LEPTONS ];
        Float_t TempPhi1 [ MAX_LEPTONS ];
        Float_t TempEnergy1 [ MAX_LEPTONS ];
        Float_t TempPt2 [ MAX_LEPTONS ];
        Float_t TempEta2 [ MAX_LEPTONS ];
        Float_t TempPhi2 [ MAX_LEPTONS ];
        Float_t TempEnergy2 [ MAX_LEPTONS ];
        Float_t TempFloat1 [ MAX_LEPTONS ];
        Float_t TempFloat2 [ MAX_LEPTONS ];
        Float_t TempFloat3 [ MAX_LEPTONS ];
        Float_t TempFloat4 [ MAX_LEPTONS ];

        void RegisterTree( TTree* root, const std::string& name = "LepInfo" )
        {
            root->Branch( ( name + ".Size" ).c_str(),                            &Size,                           ( name + "Size/I" ).c_str() );
            root->Branch( ( name + ".Index" ).c_str(),                           Index,                           ( name + ".Index[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".LeptonType" ).c_str(),                      LeptonType,                      ( name + ".LeptonType[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Charge" ).c_str(),                          Charge,                          ( name + ".Charge[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Pt" ).c_str(),                              Pt,                              ( name + ".Pt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Et" ).c_str(),                              Et,                              ( name + ".Et[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Eta" ).c_str(),                             Eta,                             ( name + ".Eta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Phi" ).c_str(),                             Phi,                             ( name + ".Phi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Px" ).c_str(),                              Px,                              ( name + ".Px[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Py" ).c_str(),                              Py,                              ( name + ".Py[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Pz" ).c_str(),                              Pz,                              ( name + ".Pz[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Energy" ).c_str(),                          Energy,                          ( name + ".Energy[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TrackerBasedIsoR03" ).c_str(),              TrackerBasedIsoR03,              ( name + ".TrackerBasedIsoR03[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EcalBasedIsoR03" ).c_str(),                 EcalBasedIsoR03,                 ( name + ".EcalBasedIsoR03[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".HcalBasedIsoR03" ).c_str(),                 HcalBasedIsoR03,                 ( name + ".HcalBasedIsoR03[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ChargedHadronIsoR03" ).c_str(),             ChargedHadronIsoR03,             ( name + ".ChargedHadronIsoR03[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".NeutralHadronIsoR03" ).c_str(),             NeutralHadronIsoR03,             ( name + ".NeutralHadronIsoR03[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhotonIsoR03" ).c_str(),                    PhotonIsoR03,                    ( name + ".PhotonIsoR03[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".sumPUPtR03" ).c_str(),                      sumPUPtR03,                      ( name + ".sumPUPtR03[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PFIsoRhoCorrR03" ).c_str(),                 PFIsoRhoCorrR03,                 ( name + ".PFIsoRhoCorrR03[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ChargedHadronIsoR04" ).c_str(),             ChargedHadronIsoR04,             ( name + ".ChargedHadronIsoR04[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".NeutralHadronIsoR04" ).c_str(),             NeutralHadronIsoR04,             ( name + ".NeutralHadronIsoR04[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhotonIsoR04" ).c_str(),                    PhotonIsoR04,                    ( name + ".PhotonIsoR04[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".sumPUPtR04" ).c_str(),                      sumPUPtR04,                      ( name + ".sumPUPtR04[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PFIsoDeltaBetaCorrR04" ).c_str(),           PFIsoDeltaBetaCorrR04,           ( name + ".PFIsoDeltaBetaCorrR04[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EcalPFIsoRhoCorr2016" ).c_str(),            EcalPFIsoRhoCorr2016,            ( name + ".EcalPFIsoRhoCorr2016[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".HcalPFIsoRhoCorr2016" ).c_str(),            HcalPFIsoRhoCorr2016,            ( name + ".HcalPFIsoRhoCorr2016[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Ip3dPV" ).c_str(),                          Ip3dPV,                          ( name + ".Ip3dPV[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Ip3dPVErr" ).c_str(),                       Ip3dPVErr,                       ( name + ".Ip3dPVErr[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Ip3dPVSignificance" ).c_str(),              Ip3dPVSignificance,              ( name + ".Ip3dPVSignificance[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MiniIso" ).c_str(),                         MiniIso,                         ( name + ".MiniIso[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuType" ).c_str(),                          MuType,                          ( name + ".MuType[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".isPFMuon" ).c_str(),                        isPFMuon,                        ( name + ".isPFMuon[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".MuonCutBasedMuIdLOOSE" ).c_str(),           MuonCutBasedMuIdLOOSE,           ( name + ".MuonCutBasedMuIdLOOSE[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".MuonCutBasedMuIdMEDIUM" ).c_str(),          MuonCutBasedMuIdMEDIUM,          ( name + ".MuonCutBasedMuIdMEDIUM[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".MuonCutBasedMuIdTIGHT" ).c_str(),           MuonCutBasedMuIdTIGHT,           ( name + ".MuonCutBasedMuIdTIGHT[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".MuonCutBasedIdGlobalHighPt" ).c_str(),      MuonCutBasedIdGlobalHighPt,      ( name + ".MuonCutBasedIdGlobalHighPt[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".MuonCutBasedIdTrkHighPt" ).c_str(),         MuonCutBasedIdTrkHighPt,         ( name + ".MuonCutBasedIdTrkHighPt[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".isGoodMuonTMOneStationTight" ).c_str(),     isGoodMuonTMOneStationTight,     ( name + ".isGoodMuonTMOneStationTight[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".isGoodMuonGlobalMuonPromptTight" ).c_str(), isGoodMuonGlobalMuonPromptTight, ( name + ".isGoodMuonGlobalMuonPromptTight[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".MuInnerPt" ).c_str(),                       MuInnerPt,                       ( name + ".MuInnerPt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuInnerEta" ).c_str(),                      MuInnerEta,                      ( name + ".MuInnerEta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuInnerPhi" ).c_str(),                      MuInnerPhi,                      ( name + ".MuInnerPhi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuInnerPtError" ).c_str(),                  MuInnerPtError,                  ( name + ".MuInnerPtError[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".innerTracknormalizedChi2" ).c_str(),        innerTracknormalizedChi2,        ( name + ".innerTracknormalizedChi2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuInnerTrackDz" ).c_str(),                  MuInnerTrackDz,                  ( name + ".MuInnerTrackDz[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuInnerTrackDxy" ).c_str(),                 MuInnerTrackDxy,                 ( name + ".MuInnerTrackDxy[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuInnerTrackVHitFrac" ).c_str(),            MuInnerTrackVHitFrac,            ( name + ".MuInnerTrackVHitFrac[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuInnerTrackHighPurity" ).c_str(),          MuInnerTrackHighPurity,          ( name + ".MuInnerTrackHighPurity[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".MuInnerTrackNHits" ).c_str(),               MuInnerTrackNHits,               ( name + ".MuInnerTrackNHits[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuNTrackerHits" ).c_str(),                  MuNTrackerHits,                  ( name + ".MuNTrackerHits[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuNPixelLayers" ).c_str(),                  MuNPixelLayers,                  ( name + ".MuNPixelLayers[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuNPixelLayersWMeasurement" ).c_str(),      MuNPixelLayersWMeasurement,      ( name + ".MuNPixelLayersWMeasurement[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuNTrackLayersWMeasurement" ).c_str(),      MuNTrackLayersWMeasurement,      ( name + ".MuNTrackLayersWMeasurement[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuGlobalPt" ).c_str(),                      MuGlobalPt,                      ( name + ".MuGlobalPt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuGlobalEta" ).c_str(),                     MuGlobalEta,                     ( name + ".MuGlobalEta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuGlobalPhi" ).c_str(),                     MuGlobalPhi,                     ( name + ".MuGlobalPhi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuGlobalPtError" ).c_str(),                 MuGlobalPtError,                 ( name + ".MuGlobalPtError[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuGlobalNormalizedChi2" ).c_str(),          MuGlobalNormalizedChi2,          ( name + ".MuGlobalNormalizedChi2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuNMatchedStations" ).c_str(),              MuNMatchedStations,              ( name + ".MuNMatchedStations[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuNMuonhits" ).c_str(),                     MuNMuonhits,                     ( name + ".MuNMuonhits[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuDThits" ).c_str(),                        MuDThits,                        ( name + ".MuDThits[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuCSChits" ).c_str(),                       MuCSChits,                       ( name + ".MuCSChits[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuRPChits" ).c_str(),                       MuRPChits,                       ( name + ".MuRPChits[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuSegCompatibility" ).c_str(),              MuSegCompatibility,              ( name + ".MuSegCompatibility[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuSTATKMatchingChi2" ).c_str(),             MuSTATKMatchingChi2,             ( name + ".MuSTATKMatchingChi2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuInnerTrackKinkVal" ).c_str(),             MuInnerTrackKinkVal,             ( name + ".MuInnerTrackKinkVal[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuStationMask" ).c_str(),                   MuStationMask,                   ( name + ".MuStationMask[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuNMatchedStations" ).c_str(),              MuNMatchedStations,              ( name + ".MuNMatchedStations[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuExpectedNMatchedStations" ).c_str(),      MuExpectedNMatchedStations,      ( name + ".MuExpectedNMatchedStations[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuBestTrackType" ).c_str(),                 MuBestTrackType,                 ( name + ".MuBestTrackType[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuBestTrackPt" ).c_str(),                   MuBestTrackPt,                   ( name + ".MuBestTrackPt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuBestTrackEta" ).c_str(),                  MuBestTrackEta,                  ( name + ".MuBestTrackEta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuBestTrackPhi" ).c_str(),                  MuBestTrackPhi,                  ( name + ".MuBestTrackPhi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuBestTrackPtError" ).c_str(),              MuBestTrackPtError,              ( name + ".MuBestTrackPtError[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuBestTrackDz" ).c_str(),                   MuBestTrackDz,                   ( name + ".MuBestTrackDz[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuBestTrackDxy" ).c_str(),                  MuBestTrackDxy,                  ( name + ".MuBestTrackDxy[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuBestTrackNMuonhits" ).c_str(),            MuBestTrackNMuonhits,            ( name + ".MuBestTrackNMuonhits[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuTunePBestTrackType" ).c_str(),            MuTunePBestTrackType,            ( name + ".MuTunePBestTrackType[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuTunePBestTrackPt" ).c_str(),              MuTunePBestTrackPt,              ( name + ".MuTunePBestTrackPt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuTunePBestTrackEta" ).c_str(),             MuTunePBestTrackEta,             ( name + ".MuTunePBestTrackEta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuTunePBestTrackPhi" ).c_str(),             MuTunePBestTrackPhi,             ( name + ".MuTunePBestTrackPhi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuTunePBestTrackPtError" ).c_str(),         MuTunePBestTrackPtError,         ( name + ".MuTunePBestTrackPtError[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuTunePBestTrackDz" ).c_str(),              MuTunePBestTrackDz,              ( name + ".MuTunePBestTrackDz[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuTunePBestTrackDxy" ).c_str(),             MuTunePBestTrackDxy,             ( name + ".MuTunePBestTrackDxy[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuTunePBestTrackNMuonhits" ).c_str(),       MuTunePBestTrackNMuonhits,       ( name + ".MuTunePBestTrackNMuonhits[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuontimenDof" ).c_str(),                    MuontimenDof,                    ( name + ".MuontimenDof[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".MuontimeAtIpInOut" ).c_str(),               MuontimeAtIpInOut,               ( name + ".MuontimeAtIpInOut[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".MuontimeAtIpOutIn" ).c_str(),               MuontimeAtIpOutIn,               ( name + ".MuontimeAtIpOutIn[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Muondirection" ).c_str(),                   Muondirection,                   ( name + ".Muondirection[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".isPFElectron" ).c_str(),                    isPFElectron,                    ( name + ".isPFElectron[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".ElEnergyCorrFactor" ).c_str(),              ElEnergyCorrFactor,              ( name + ".ElEnergyCorrFactor[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElEnergyPreCorrErr" ).c_str(),              ElEnergyPreCorrErr,              ( name + ".ElEnergyPreCorrErr[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElEnergyPostCorrErr" ).c_str(),             ElEnergyPostCorrErr,             ( name + ".ElEnergyPostCorrErr[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElEnergyPostCorrScaleUp" ).c_str(),         ElEnergyPostCorrScaleUp,         ( name + ".ElEnergyPostCorrScaleUp[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElEnergyPostCorrScaleDown" ).c_str(),       ElEnergyPostCorrScaleDown,       ( name + ".ElEnergyPostCorrScaleDown[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElEnergyPostCorrSmearUp" ).c_str(),         ElEnergyPostCorrSmearUp,         ( name + ".ElEnergyPostCorrSmearUp[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElEnergyPostCorrSmearDown" ).c_str(),       ElEnergyPostCorrSmearDown,       ( name + ".ElEnergyPostCorrSmearDown[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EgammaCutBasedEleIdVETO" ).c_str(),         EgammaCutBasedEleIdVETO,         ( name + ".EgammaCutBasedEleIdVETO[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".EgammaCutBasedEleIdLOOSE" ).c_str(),        EgammaCutBasedEleIdLOOSE,        ( name + ".EgammaCutBasedEleIdLOOSE[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".EgammaCutBasedEleIdMEDIUM" ).c_str(),       EgammaCutBasedEleIdMEDIUM,       ( name + ".EgammaCutBasedEleIdMEDIUM[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".EgammaCutBasedEleIdTIGHT" ).c_str(),        EgammaCutBasedEleIdTIGHT,        ( name + ".EgammaCutBasedEleIdTIGHT[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".EgammaCutBasedEleIdHEEP" ).c_str(),         EgammaCutBasedEleIdHEEP,         ( name + ".EgammaCutBasedEleIdHEEP[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".EtaSC" ).c_str(),                           EtaSC,                           ( name + ".EtaSC[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhiSC" ).c_str(),                           PhiSC,                           ( name + ".PhiSC[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".rawEnergySC" ).c_str(),                     rawEnergySC,                     ( name + ".rawEnergySC[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EnergySC" ).c_str(),                        EnergySC,                        ( name + ".EnergySC[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ESEnergySC" ).c_str(),                      ESEnergySC,                      ( name + ".ESEnergySC[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".R9" ).c_str(),                              R9,                              ( name + ".R9[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".E1x5" ).c_str(),                            E1x5,                            ( name + ".E1x5[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".E2x5Max" ).c_str(),                         E2x5Max,                         ( name + ".E2x5Max[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".E5x5" ).c_str(),                            E5x5,                            ( name + ".E5x5[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".SigmaIetaIeta" ).c_str(),                   SigmaIetaIeta,                   ( name + ".SigmaIetaIeta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".SigmaIetaIphi" ).c_str(),                   SigmaIetaIphi,                   ( name + ".SigmaIetaIphi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".SigmaIphiIphi" ).c_str(),                   SigmaIphiIphi,                   ( name + ".SigmaIphiIphi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EtaWidth" ).c_str(),                        EtaWidth,                        ( name + ".EtaWidth[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhiWidth" ).c_str(),                        PhiWidth,                        ( name + ".PhiWidth[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElHadoverEm" ).c_str(),                     ElHadoverEm,                     ( name + ".ElHadoverEm[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".HcalDepth1Iso" ).c_str(),                   HcalDepth1Iso,                   ( name + ".HcalDepth1Iso[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".HcalDepth2Iso" ).c_str(),                   HcalDepth2Iso,                   ( name + ".HcalDepth2Iso[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".HEEPTrackIso" ).c_str(),                    HEEPTrackIso,                    ( name + ".HEEPTrackIso[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EgammaMVANonTrig" ).c_str(),                EgammaMVANonTrig,                ( name + ".EgammaMVANonTrig[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EgammaMVATrig" ).c_str(),                   EgammaMVATrig,                   ( name + ".EgammaMVATrig[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".isEcalDriven" ).c_str(),                    isEcalDriven,                    ( name + ".isEcalDriven[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".isTrackerDriven" ).c_str(),                 isTrackerDriven,                 ( name + ".isTrackerDriven[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".ElTightCharge" ).c_str(),                   ElTightCharge,                   ( name + ".ElTightCharge[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".ElMomentum" ).c_str(),                      ElMomentum,                      ( name + ".ElMomentum[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElMomentumErr" ).c_str(),                   ElMomentumErr,                   ( name + ".ElMomentumErr[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElTrackPt" ).c_str(),                       ElTrackPt,                       ( name + ".ElTrackPt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElTrackEta" ).c_str(),                      ElTrackEta,                      ( name + ".ElTrackEta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElTrackPhi" ).c_str(),                      ElTrackPhi,                      ( name + ".ElTrackPhi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElTrackDz" ).c_str(),                       ElTrackDz,                       ( name + ".ElTrackDz[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElTrackDxy" ).c_str(),                      ElTrackDxy,                      ( name + ".ElTrackDxy[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElTrackNormalizedChi2" ).c_str(),           ElTrackNormalizedChi2,           ( name + ".ElTrackNormalizedChi2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElNTrackLayersWMeasurement" ).c_str(),      ElNTrackLayersWMeasurement,      ( name + ".ElNTrackLayersWMeasurement[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".ElTrackNHits" ).c_str(),                    ElTrackNHits,                    ( name + ".ElTrackNHits[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".NumberOfExpectedInnerHits" ).c_str(),       NumberOfExpectedInnerHits,       ( name + ".NumberOfExpectedInnerHits[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".ElClassification" ).c_str(),                ElClassification,                ( name + ".ElClassification[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".ElFBrem" ).c_str(),                         ElFBrem,                         ( name + ".ElFBrem[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElNumberOfBrems" ).c_str(),                 ElNumberOfBrems,                 ( name + ".ElNumberOfBrems[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".ElhasConv" ).c_str(),                       ElhasConv,                       ( name + ".ElhasConv[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".ElEcalE" ).c_str(),                         ElEcalE,                         ( name + ".ElEcalE[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElEnergyErr" ).c_str(),                     ElEnergyErr,                     ( name + ".ElEnergyErr[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ElEoverP" ).c_str(),                        ElEoverP,                        ( name + ".ElEoverP[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EldeltaEta" ).c_str(),                      EldeltaEta,                      ( name + ".EldeltaEta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EldeltaPhi" ).c_str(),                      EldeltaPhi,                      ( name + ".EldeltaPhi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EldeltaPhiSeed" ).c_str(),                  EldeltaPhiSeed,                  ( name + ".EldeltaPhiSeed[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".isPFTau" ).c_str(),                         isPFTau,                         ( name + ".isPFTau[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".GenPt" ).c_str(),                           GenPt,                           ( name + ".GenPt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenEta" ).c_str(),                          GenEta,                          ( name + ".GenEta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenPhi" ).c_str(),                          GenPhi,                          ( name + ".GenPhi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenPdgID" ).c_str(),                        GenPdgID,                        ( name + ".GenPdgID[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".GenMCTag" ).c_str(),                        GenMCTag,                        ( name + ".GenMCTag[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".TempPt1" ).c_str(),                         TempPt1,                         ( name + ".TempPt1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempEta1" ).c_str(),                        TempEta1,                        ( name + ".TempEta1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempPhi1" ).c_str(),                        TempPhi1,                        ( name + ".TempPhi1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempEnergy1" ).c_str(),                     TempEnergy1,                     ( name + ".TempEnergy1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempPt2" ).c_str(),                         TempPt2,                         ( name + ".TempPt2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempEta2" ).c_str(),                        TempEta2,                        ( name + ".TempEta2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempPhi2" ).c_str(),                        TempPhi2,                        ( name + ".TempPhi2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempEnergy2" ).c_str(),                     TempEnergy2,                     ( name + ".TempEnergy2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempFloat1" ).c_str(),                      TempFloat1,                      ( name + ".TempFloat1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempFloat2" ).c_str(),                      TempFloat2,                      ( name + ".TempFloat2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempFloat3" ).c_str(),                      TempFloat3,                      ( name + ".TempFloat3[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempFloat4" ).c_str(),                      TempFloat4,                      ( name + ".TempFloat4[" + name + ".Size]/F" ).c_str() );
        }

        void Register( TTree* root, const std::string& name = "LepInfo" )
        {
            SetBranchAddress( root, ( name + ".Size" ).c_str(),                            &Size );
            SetBranchAddress( root, ( name + ".Index" ).c_str(),                           Index );
            SetBranchAddress( root, ( name + ".LeptonType" ).c_str(),                      LeptonType );
            SetBranchAddress( root, ( name + ".Charge" ).c_str(),                          Charge );
            SetBranchAddress( root, ( name + ".Pt" ).c_str(),                              Pt );
            SetBranchAddress( root, ( name + ".Et" ).c_str(),                              Et );
            SetBranchAddress( root, ( name + ".Eta" ).c_str(),                             Eta );
            SetBranchAddress( root, ( name + ".Phi" ).c_str(),                             Phi );
            SetBranchAddress( root, ( name + ".Px" ).c_str(),                              Px );
            SetBranchAddress( root, ( name + ".Py" ).c_str(),                              Py );
            SetBranchAddress( root, ( name + ".Pz" ).c_str(),                              Pz );
            SetBranchAddress( root, ( name + ".Energy" ).c_str(),                          Energy );
            SetBranchAddress( root, ( name + ".TrackerBasedIsoR03" ).c_str(),              TrackerBasedIsoR03 );
            SetBranchAddress( root, ( name + ".EcalBasedIsoR03" ).c_str(),                 EcalBasedIsoR03 );
            SetBranchAddress( root, ( name + ".HcalBasedIsoR03" ).c_str(),                 HcalBasedIsoR03 );
            SetBranchAddress( root, ( name + ".ChargedHadronIsoR03" ).c_str(),             ChargedHadronIsoR03 );
            SetBranchAddress( root, ( name + ".NeutralHadronIsoR03" ).c_str(),             NeutralHadronIsoR03 );
            SetBranchAddress( root, ( name + ".PhotonIsoR03" ).c_str(),                    PhotonIsoR03 );
            SetBranchAddress( root, ( name + ".sumPUPtR03" ).c_str(),                      sumPUPtR03 );
            SetBranchAddress( root, ( name + ".PFIsoRhoCorrR03" ).c_str(),                 PFIsoRhoCorrR03 );
            SetBranchAddress( root, ( name + ".ChargedHadronIsoR04" ).c_str(),             ChargedHadronIsoR04 );
            SetBranchAddress( root, ( name + ".NeutralHadronIsoR04" ).c_str(),             NeutralHadronIsoR04 );
            SetBranchAddress( root, ( name + ".PhotonIsoR04" ).c_str(),                    PhotonIsoR04 );
            SetBranchAddress( root, ( name + ".sumPUPtR04" ).c_str(),                      sumPUPtR04 );
            SetBranchAddress( root, ( name + ".PFIsoDeltaBetaCorrR04" ).c_str(),           PFIsoDeltaBetaCorrR04 );
            SetBranchAddress( root, ( name + ".EcalPFIsoRhoCorr2016" ).c_str(),            EcalPFIsoRhoCorr2016 );
            SetBranchAddress( root, ( name + ".HcalPFIsoRhoCorr2016" ).c_str(),            HcalPFIsoRhoCorr2016 );
            SetBranchAddress( root, ( name + ".Ip3dPV" ).c_str(),                          Ip3dPV );
            SetBranchAddress( root, ( name + ".Ip3dPVErr" ).c_str(),                       Ip3dPVErr );
            SetBranchAddress( root, ( name + ".Ip3dPVSignificance" ).c_str(),              Ip3dPVSignificance );
            SetBranchAddress( root, ( name + ".MiniIso" ).c_str(),                         MiniIso );
            SetBranchAddress( root, ( name + ".MuType" ).c_str(),                          MuType );
            SetBranchAddress( root, ( name + ".isPFMuon" ).c_str(),                        isPFMuon );
            SetBranchAddress( root, ( name + ".MuonCutBasedMuIdLOOSE" ).c_str(),           MuonCutBasedMuIdLOOSE );
            SetBranchAddress( root, ( name + ".MuonCutBasedMuIdMEDIUM" ).c_str(),          MuonCutBasedMuIdMEDIUM );
            SetBranchAddress( root, ( name + ".MuonCutBasedMuIdTIGHT" ).c_str(),           MuonCutBasedMuIdTIGHT );
            SetBranchAddress( root, ( name + ".MuonCutBasedIdGlobalHighPt" ).c_str(),      MuonCutBasedIdGlobalHighPt );
            SetBranchAddress( root, ( name + ".MuonCutBasedIdTrkHighPt" ).c_str(),         MuonCutBasedIdTrkHighPt );
            SetBranchAddress( root, ( name + ".isGoodMuonTMOneStationTight" ).c_str(),     isGoodMuonTMOneStationTight );
            SetBranchAddress( root, ( name + ".isGoodMuonGlobalMuonPromptTight" ).c_str(), isGoodMuonGlobalMuonPromptTight );
            SetBranchAddress( root, ( name + ".MuInnerPt" ).c_str(),                       MuInnerPt );
            SetBranchAddress( root, ( name + ".MuInnerEta" ).c_str(),                      MuInnerEta );
            SetBranchAddress( root, ( name + ".MuInnerPhi" ).c_str(),                      MuInnerPhi );
            SetBranchAddress( root, ( name + ".MuInnerPtError" ).c_str(),                  MuInnerPtError );
            SetBranchAddress( root, ( name + ".innerTracknormalizedChi2" ).c_str(),        innerTracknormalizedChi2 );
            SetBranchAddress( root, ( name + ".MuInnerTrackDz" ).c_str(),                  MuInnerTrackDz );
            SetBranchAddress( root, ( name + ".MuInnerTrackDxy" ).c_str(),                 MuInnerTrackDxy );
            SetBranchAddress( root, ( name + ".MuInnerTrackVHitFrac" ).c_str(),            MuInnerTrackVHitFrac );
            SetBranchAddress( root, ( name + ".MuInnerTrackHighPurity" ).c_str(),          MuInnerTrackHighPurity );
            SetBranchAddress( root, ( name + ".MuInnerTrackNHits" ).c_str(),               MuInnerTrackNHits );
            SetBranchAddress( root, ( name + ".MuNTrackerHits" ).c_str(),                  MuNTrackerHits );
            SetBranchAddress( root, ( name + ".MuNPixelLayers" ).c_str(),                  MuNPixelLayers );
            SetBranchAddress( root, ( name + ".MuNPixelLayersWMeasurement" ).c_str(),      MuNPixelLayersWMeasurement );
            SetBranchAddress( root, ( name + ".MuNTrackLayersWMeasurement" ).c_str(),      MuNTrackLayersWMeasurement );
            SetBranchAddress( root, ( name + ".MuGlobalPt" ).c_str(),                      MuGlobalPt );
            SetBranchAddress( root, ( name + ".MuGlobalEta" ).c_str(),                     MuGlobalEta );
            SetBranchAddress( root, ( name + ".MuGlobalPhi" ).c_str(),                     MuGlobalPhi );
            SetBranchAddress( root, ( name + ".MuGlobalPtError" ).c_str(),                 MuGlobalPtError );
            SetBranchAddress( root, ( name + ".MuGlobalNormalizedChi2" ).c_str(),          MuGlobalNormalizedChi2 );
            SetBranchAddress( root, ( name + ".MuNMuonhits" ).c_str(),                     MuNMuonhits );
            SetBranchAddress( root, ( name + ".MuDThits" ).c_str(),                        MuDThits );
            SetBranchAddress( root, ( name + ".MuCSChits" ).c_str(),                       MuCSChits );
            SetBranchAddress( root, ( name + ".MuRPChits" ).c_str(),                       MuRPChits );
            SetBranchAddress( root, ( name + ".MuSegCompatibility" ).c_str(),              MuSegCompatibility );
            SetBranchAddress( root, ( name + ".MuSTATKMatchingChi2" ).c_str(),             MuSTATKMatchingChi2 );
            SetBranchAddress( root, ( name + ".MuInnerTrackKinkVal" ).c_str(),             MuInnerTrackKinkVal );
            SetBranchAddress( root, ( name + ".MuStationMask" ).c_str(),                   MuStationMask );
            SetBranchAddress( root, ( name + ".MuNMatchedStations" ).c_str(),              MuNMatchedStations );
            SetBranchAddress( root, ( name + ".MuBestTrackType" ).c_str(),                 MuBestTrackType );
            SetBranchAddress( root, ( name + ".MuBestTrackPt" ).c_str(),                   MuBestTrackPt );
            SetBranchAddress( root, ( name + ".MuBestTrackEta" ).c_str(),                  MuBestTrackEta );
            SetBranchAddress( root, ( name + ".MuBestTrackPhi" ).c_str(),                  MuBestTrackPhi );
            SetBranchAddress( root, ( name + ".MuBestTrackPtError" ).c_str(),              MuBestTrackPtError );
            SetBranchAddress( root, ( name + ".MuBestTrackDz" ).c_str(),                   MuBestTrackDz );
            SetBranchAddress( root, ( name + ".MuBestTrackDxy" ).c_str(),                  MuBestTrackDxy );
            SetBranchAddress( root, ( name + ".MuBestTrackNMuonhits" ).c_str(),            MuBestTrackNMuonhits );
            SetBranchAddress( root, ( name + ".MuTunePBestTrackType" ).c_str(),            MuTunePBestTrackType );
            SetBranchAddress( root, ( name + ".MuTunePBestTrackPt" ).c_str(),              MuTunePBestTrackPt );
            SetBranchAddress( root, ( name + ".MuTunePBestTrackEta" ).c_str(),             MuTunePBestTrackEta );
            SetBranchAddress( root, ( name + ".MuTunePBestTrackPhi" ).c_str(),             MuTunePBestTrackPhi );
            SetBranchAddress( root, ( name + ".MuTunePBestTrackPtError" ).c_str(),         MuTunePBestTrackPtError );
            SetBranchAddress( root, ( name + ".MuTunePBestTrackDz" ).c_str(),              MuTunePBestTrackDz );
            SetBranchAddress( root, ( name + ".MuTunePBestTrackDxy" ).c_str(),             MuTunePBestTrackDxy );
            SetBranchAddress( root, ( name + ".MuTunePBestTrackNMuonhits" ).c_str(),       MuTunePBestTrackNMuonhits );
            SetBranchAddress( root, ( name + ".MuontimenDof" ).c_str(),                    MuontimenDof );
            SetBranchAddress( root, ( name + ".MuontimeAtIpInOut" ).c_str(),               MuontimeAtIpInOut );
            SetBranchAddress( root, ( name + ".MuontimeAtIpOutIn" ).c_str(),               MuontimeAtIpOutIn );
            SetBranchAddress( root, ( name + ".Muondirection" ).c_str(),                   Muondirection );
            SetBranchAddress( root, ( name + ".isPFElectron" ).c_str(),                    isPFElectron );
            SetBranchAddress( root, ( name + ".ElEnergyCorrFactor" ).c_str(),              ElEnergyCorrFactor );
            SetBranchAddress( root, ( name + ".ElEnergyPreCorrErr" ).c_str(),              ElEnergyPreCorrErr );
            SetBranchAddress( root, ( name + ".ElEnergyPostCorrErr" ).c_str(),             ElEnergyPostCorrErr );
            SetBranchAddress( root, ( name + ".ElEnergyPostCorrScaleUp" ).c_str(),         ElEnergyPostCorrScaleUp );
            SetBranchAddress( root, ( name + ".ElEnergyPostCorrScaleDown" ).c_str(),       ElEnergyPostCorrScaleDown );
            SetBranchAddress( root, ( name + ".ElEnergyPostCorrSmearUp" ).c_str(),         ElEnergyPostCorrSmearUp );
            SetBranchAddress( root, ( name + ".ElEnergyPostCorrSmearDown" ).c_str(),       ElEnergyPostCorrSmearDown );
            SetBranchAddress( root, ( name + ".EgammaCutBasedEleIdVETO" ).c_str(),         EgammaCutBasedEleIdVETO );
            SetBranchAddress( root, ( name + ".EgammaCutBasedEleIdLOOSE" ).c_str(),        EgammaCutBasedEleIdLOOSE );
            SetBranchAddress( root, ( name + ".EgammaCutBasedEleIdMEDIUM" ).c_str(),       EgammaCutBasedEleIdMEDIUM );
            SetBranchAddress( root, ( name + ".EgammaCutBasedEleIdTIGHT" ).c_str(),        EgammaCutBasedEleIdTIGHT );
            SetBranchAddress( root, ( name + ".EgammaCutBasedEleIdHEEP" ).c_str(),         EgammaCutBasedEleIdHEEP );
            SetBranchAddress( root, ( name + ".EtaSC" ).c_str(),                           EtaSC );
            SetBranchAddress( root, ( name + ".PhiSC" ).c_str(),                           PhiSC );
            SetBranchAddress( root, ( name + ".rawEnergySC" ).c_str(),                     rawEnergySC );
            SetBranchAddress( root, ( name + ".EnergySC" ).c_str(),                        EnergySC );
            SetBranchAddress( root, ( name + ".ESEnergySC" ).c_str(),                      ESEnergySC );
            SetBranchAddress( root, ( name + ".R9" ).c_str(),                              R9 );
            SetBranchAddress( root, ( name + ".E1x5" ).c_str(),                            E1x5 );
            SetBranchAddress( root, ( name + ".E2x5Max" ).c_str(),                         E2x5Max );
            SetBranchAddress( root, ( name + ".E5x5" ).c_str(),                            E5x5 );
            SetBranchAddress( root, ( name + ".SigmaIetaIeta" ).c_str(),                   SigmaIetaIeta );
            SetBranchAddress( root, ( name + ".SigmaIetaIphi" ).c_str(),                   SigmaIetaIphi );
            SetBranchAddress( root, ( name + ".SigmaIphiIphi" ).c_str(),                   SigmaIphiIphi );
            SetBranchAddress( root, ( name + ".EtaWidth" ).c_str(),                        EtaWidth );
            SetBranchAddress( root, ( name + ".PhiWidth" ).c_str(),                        PhiWidth );
            SetBranchAddress( root, ( name + ".ElHadoverEm" ).c_str(),                     ElHadoverEm );
            SetBranchAddress( root, ( name + ".HcalDepth1Iso" ).c_str(),                   HcalDepth1Iso );
            SetBranchAddress( root, ( name + ".HcalDepth2Iso" ).c_str(),                   HcalDepth2Iso );
            SetBranchAddress( root, ( name + ".HEEPTrackIso" ).c_str(),                    HEEPTrackIso );
            SetBranchAddress( root, ( name + ".EgammaMVANonTrig" ).c_str(),                EgammaMVANonTrig );
            SetBranchAddress( root, ( name + ".EgammaMVATrig" ).c_str(),                   EgammaMVATrig );
            SetBranchAddress( root, ( name + ".isEcalDriven" ).c_str(),                    isEcalDriven );
            SetBranchAddress( root, ( name + ".isTrackerDriven" ).c_str(),                 isTrackerDriven );
            SetBranchAddress( root, ( name + ".ElTightCharge" ).c_str(),                   ElTightCharge );
            SetBranchAddress( root, ( name + ".ElMomentum" ).c_str(),                      ElMomentum );
            SetBranchAddress( root, ( name + ".ElMomentumErr" ).c_str(),                   ElMomentumErr );
            SetBranchAddress( root, ( name + ".ElTrackPt" ).c_str(),                       ElTrackPt );
            SetBranchAddress( root, ( name + ".ElTrackEta" ).c_str(),                      ElTrackEta );
            SetBranchAddress( root, ( name + ".ElTrackPhi" ).c_str(),                      ElTrackPhi );
            SetBranchAddress( root, ( name + ".ElTrackDz" ).c_str(),                       ElTrackDz );
            SetBranchAddress( root, ( name + ".ElTrackDxy" ).c_str(),                      ElTrackDxy );
            SetBranchAddress( root, ( name + ".ElTrackNormalizedChi2" ).c_str(),           ElTrackNormalizedChi2 );
            SetBranchAddress( root, ( name + ".ElNTrackLayersWMeasurement" ).c_str(),      ElNTrackLayersWMeasurement );
            SetBranchAddress( root, ( name + ".ElTrackNHits" ).c_str(),                    ElTrackNHits );
            SetBranchAddress( root, ( name + ".NumberOfExpectedInnerHits" ).c_str(),       NumberOfExpectedInnerHits );
            SetBranchAddress( root, ( name + ".ElClassification" ).c_str(),                ElClassification );
            SetBranchAddress( root, ( name + ".ElFBrem" ).c_str(),                         ElFBrem );
            SetBranchAddress( root, ( name + ".ElNumberOfBrems" ).c_str(),                 ElNumberOfBrems );
            SetBranchAddress( root, ( name + ".ElhasConv" ).c_str(),                       ElhasConv );
            SetBranchAddress( root, ( name + ".ElEcalE" ).c_str(),                         ElEcalE );
            SetBranchAddress( root, ( name + ".ElEnergyErr" ).c_str(),                     ElEnergyErr );
            SetBranchAddress( root, ( name + ".ElEoverP" ).c_str(),                        ElEoverP );
            SetBranchAddress( root, ( name + ".EldeltaEta" ).c_str(),                      EldeltaEta );
            SetBranchAddress( root, ( name + ".EldeltaPhi" ).c_str(),                      EldeltaPhi );
            SetBranchAddress( root, ( name + ".EldeltaPhiSeed" ).c_str(),                  EldeltaPhiSeed );
            SetBranchAddress( root, ( name + ".isPFTau" ).c_str(),                         isPFTau );
            SetBranchAddress( root, ( name + ".GenPt" ).c_str(),                           GenPt );
            SetBranchAddress( root, ( name + ".GenEta" ).c_str(),                          GenEta );
            SetBranchAddress( root, ( name + ".GenPhi" ).c_str(),                          GenPhi );
            SetBranchAddress( root, ( name + ".GenPdgID" ).c_str(),                        GenPdgID );
            SetBranchAddress( root, ( name + ".GenMCTag" ).c_str(),                        GenMCTag );
            SetBranchAddress( root, ( name + ".TempPt1" ).c_str(),                         TempPt1 );
            SetBranchAddress( root, ( name + ".TempEta1" ).c_str(),                        TempEta1 );
            SetBranchAddress( root, ( name + ".TempPhi1" ).c_str(),                        TempPhi1 );
            SetBranchAddress( root, ( name + ".TempEnergy1" ).c_str(),                     TempEnergy1 );
            SetBranchAddress( root, ( name + ".TempPt2" ).c_str(),                         TempPt2 );
            SetBranchAddress( root, ( name + ".TempEta2" ).c_str(),                        TempEta2 );
            SetBranchAddress( root, ( name + ".TempPhi2" ).c_str(),                        TempPhi2 );
            SetBranchAddress( root, ( name + ".TempEnergy2" ).c_str(),                     TempEnergy2 );
            SetBranchAddress( root, ( name + ".TempFloat1" ).c_str(),                      TempFloat1 );
            SetBranchAddress( root, ( name + ".TempFloat2" ).c_str(),                      TempFloat2 );
            SetBranchAddress( root, ( name + ".TempFloat3" ).c_str(),                      TempFloat3 );
            SetBranchAddress( root, ( name + ".TempFloat4" ).c_str(),                      TempFloat4 );
        }
};

class PhotonInfoBranches {
    public:

        Int_t Size;
        Float_t Pt [ MAX_PHOTONS ];
        Float_t Eta [ MAX_PHOTONS ];
        Float_t Phi [ MAX_PHOTONS ];
        Float_t Px [ MAX_PHOTONS ];
        Float_t Py [ MAX_PHOTONS ];
        Float_t Pz [ MAX_PHOTONS ];
        Float_t Energy [ MAX_PHOTONS ];
        Bool_t isPFPhoton [ MAX_PHOTONS ];
        Float_t PhoEnergyCorrFactor [ MAX_PHOTONS ];
        Float_t PhoEnergyPreCorrErr [ MAX_PHOTONS ];
        Float_t PhoEnergyPostCorrErr [ MAX_PHOTONS ];
        Float_t PhoEnergyPostCorrScaleUp [ MAX_PHOTONS ];
        Float_t PhoEnergyPostCorrScaleDown [ MAX_PHOTONS ];
        Float_t PhoEnergyPostCorrSmearUp [ MAX_PHOTONS ];
        Float_t PhoEnergyPostCorrSmearDown [ MAX_PHOTONS ];
        Bool_t EgammaCutBasedPhoIdLOOSE [ MAX_PHOTONS ];
        Bool_t EgammaCutBasedPhoIdMEDIUM [ MAX_PHOTONS ];
        Bool_t EgammaCutBasedPhoIdTIGHT [ MAX_PHOTONS ];
        Float_t EgammaPhoIdMVA [ MAX_PHOTONS ];
        Float_t ChargedHadronIsoR03 [ MAX_PHOTONS ];
        Float_t NeutralHadronIsoR03 [ MAX_PHOTONS ];
        Float_t PhotonIsoR03 [ MAX_PHOTONS ];
        Float_t WorstChargedIsolationR03 [ MAX_PHOTONS ];
        Float_t PFChIsoRhoCorr [ MAX_PHOTONS ];
        Float_t PFNeuIsoRhoCorr [ MAX_PHOTONS ];
        Float_t PFPhoIsoRhoCorr [ MAX_PHOTONS ];
        Bool_t passelectronveto [ MAX_PHOTONS ];
        Bool_t hasPixelSeed [ MAX_PHOTONS ];
        Float_t EtaSC [ MAX_PHOTONS ];
        Float_t PhiSC [ MAX_PHOTONS ];
        Float_t rawEnergySC [ MAX_PHOTONS ];
        Float_t ESEnergySC [ MAX_PHOTONS ];
        Float_t EnergySC [ MAX_PHOTONS ];
        Float_t E5x5 [ MAX_PHOTONS ];
        Float_t R9 [ MAX_PHOTONS ];
        Float_t SigmaIetaIeta [ MAX_PHOTONS ];
        Float_t SigmaIetaIphi [ MAX_PHOTONS ];
        Float_t SigmaIphiIphi [ MAX_PHOTONS ];
        Float_t S4 [ MAX_PHOTONS ];
        Float_t ESEffSigmaRR [ MAX_PHOTONS ];
        Float_t EtaWidth [ MAX_PHOTONS ];
        Float_t PhiWidth [ MAX_PHOTONS ];
        Float_t HoverE [ MAX_PHOTONS ];
        Float_t hadTowOverEm [ MAX_PHOTONS ];
        Float_t GenPt [ MAX_PHOTONS ];
        Float_t GenEta [ MAX_PHOTONS ];
        Float_t GenPhi [ MAX_PHOTONS ];
        Int_t GenPdgID [ MAX_PHOTONS ];
        Float_t TempPt1 [ MAX_PHOTONS ];
        Float_t TempEta1 [ MAX_PHOTONS ];
        Float_t TempPhi1 [ MAX_PHOTONS ];
        Float_t TempEnergy1 [ MAX_PHOTONS ];
        Float_t TempPt2 [ MAX_PHOTONS ];
        Float_t TempEta2 [ MAX_PHOTONS ];
        Float_t TempPhi2 [ MAX_PHOTONS ];
        Float_t TempEnergy2 [ MAX_PHOTONS ];
        Float_t TempFloat1 [ MAX_PHOTONS ];
        Float_t TempFloat2 [ MAX_PHOTONS ];
        Float_t TempFloat3 [ MAX_PHOTONS ];
        Float_t TempFloat4 [ MAX_PHOTONS ];

        void RegisterTree( TTree* root, const std::string& name = "PhotonInfo" )
        {
            root->Branch( ( name + ".Size" ).c_str(),                       &Size,                      ( name + "Size/I" ).c_str() );
            root->Branch( ( name + ".Pt" ).c_str(),                         Pt,                         ( name + ".Pt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Eta" ).c_str(),                        Eta,                        ( name + ".Eta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Phi" ).c_str(),                        Phi,                        ( name + ".Phi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Px" ).c_str(),                         Px,                         ( name + ".Px[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Py" ).c_str(),                         Py,                         ( name + ".Py[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Pz" ).c_str(),                         Pz,                         ( name + ".Pz[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Energy" ).c_str(),                     Energy,                     ( name + ".Energy[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".isPFPhoton" ).c_str(),                 isPFPhoton,                 ( name + ".isPFPhoton[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".PhoEnergyCorrFactor" ).c_str(),        PhoEnergyCorrFactor,        ( name + ".PhoEnergyCorrFactor[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhoEnergyPreCorrErr" ).c_str(),        PhoEnergyPreCorrErr,        ( name + ".PhoEnergyPreCorrErr[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhoEnergyPostCorrErr" ).c_str(),       PhoEnergyPostCorrErr,       ( name + ".PhoEnergyPostCorrErr[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhoEnergyPostCorrScaleUp" ).c_str(),   PhoEnergyPostCorrScaleUp,   ( name + ".PhoEnergyPostCorrScaleUp[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhoEnergyPostCorrScaleDown" ).c_str(), PhoEnergyPostCorrScaleDown, ( name + ".PhoEnergyPostCorrScaleDown[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhoEnergyPostCorrSmearUp" ).c_str(),   PhoEnergyPostCorrSmearUp,   ( name + ".PhoEnergyPostCorrSmearUp[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhoEnergyPostCorrSmearDown" ).c_str(), PhoEnergyPostCorrSmearDown, ( name + ".PhoEnergyPostCorrSmearDown[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EgammaCutBasedPhoIdLOOSE" ).c_str(),   EgammaCutBasedPhoIdLOOSE,   ( name + ".EgammaCutBasedPhoIdLOOSE[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".EgammaCutBasedPhoIdMEDIUM" ).c_str(),  EgammaCutBasedPhoIdMEDIUM,  ( name + ".EgammaCutBasedPhoIdMEDIUM[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".EgammaCutBasedPhoIdTIGHT" ).c_str(),   EgammaCutBasedPhoIdTIGHT,   ( name + ".EgammaCutBasedPhoIdTIGHT[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".EgammaPhoIdMVA" ).c_str(),             EgammaPhoIdMVA,             ( name + ".EgammaPhoIdMVA[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ChargedHadronIsoR03" ).c_str(),        ChargedHadronIsoR03,        ( name + ".ChargedHadronIsoR03[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".NeutralHadronIsoR03" ).c_str(),        NeutralHadronIsoR03,        ( name + ".NeutralHadronIsoR03[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhotonIsoR03" ).c_str(),               PhotonIsoR03,               ( name + ".PhotonIsoR03[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".WorstChargedIsolationR03" ).c_str(),   WorstChargedIsolationR03,   ( name + ".WorstChargedIsolationR03[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PFChIsoRhoCorr" ).c_str(),             PFChIsoRhoCorr,             ( name + ".PFChIsoRhoCorr[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PFNeuIsoRhoCorr" ).c_str(),            PFNeuIsoRhoCorr,            ( name + ".PFNeuIsoRhoCorr[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PFPhoIsoRhoCorr" ).c_str(),            PFPhoIsoRhoCorr,            ( name + ".PFPhoIsoRhoCorr[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".passelectronveto" ).c_str(),           passelectronveto,           ( name + ".passelectronveto[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".hasPixelSeed" ).c_str(),               hasPixelSeed,               ( name + ".hasPixelSeed[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".EtaSC" ).c_str(),                      EtaSC,                      ( name + ".EtaSC[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhiSC" ).c_str(),                      PhiSC,                      ( name + ".PhiSC[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".rawEnergySC" ).c_str(),                rawEnergySC,                ( name + ".rawEnergySC[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ESEnergySC" ).c_str(),                 ESEnergySC,                 ( name + ".ESEnergySC[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EnergySC" ).c_str(),                   EnergySC,                   ( name + ".EnergySC[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".E5x5" ).c_str(),                       E5x5,                       ( name + ".E5x5[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".R9" ).c_str(),                         R9,                         ( name + ".R9[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".SigmaIetaIeta" ).c_str(),              SigmaIetaIeta,              ( name + ".SigmaIetaIeta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".SigmaIetaIphi" ).c_str(),              SigmaIetaIphi,              ( name + ".SigmaIetaIphi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".SigmaIphiIphi" ).c_str(),              SigmaIphiIphi,              ( name + ".SigmaIphiIphi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".S4" ).c_str(),                         S4,                         ( name + ".S4[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".ESEffSigmaRR" ).c_str(),               ESEffSigmaRR,               ( name + ".ESEffSigmaRR[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".EtaWidth" ).c_str(),                   EtaWidth,                   ( name + ".EtaWidth[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".PhiWidth" ).c_str(),                   PhiWidth,                   ( name + ".PhiWidth[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".HoverE" ).c_str(),                     HoverE,                     ( name + ".HoverE[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".hadTowOverEm" ).c_str(),               hadTowOverEm,               ( name + ".hadTowOverEm[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenPt" ).c_str(),                      GenPt,                      ( name + ".GenPt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenEta" ).c_str(),                     GenEta,                     ( name + ".GenEta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenPhi" ).c_str(),                     GenPhi,                     ( name + ".GenPhi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".GenPdgID" ).c_str(),                   GenPdgID,                   ( name + ".GenPdgID[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".TempPt1" ).c_str(),                    TempPt1,                    ( name + ".TempPt1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempEta1" ).c_str(),                   TempEta1,                   ( name + ".TempEta1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempPhi1" ).c_str(),                   TempPhi1,                   ( name + ".TempPhi1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempEnergy1" ).c_str(),                TempEnergy1,                ( name + ".TempEnergy1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempPt2" ).c_str(),                    TempPt2,                    ( name + ".TempPt2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempEta2" ).c_str(),                   TempEta2,                   ( name + ".TempEta2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempPhi2" ).c_str(),                   TempPhi2,                   ( name + ".TempPhi2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempEnergy2" ).c_str(),                TempEnergy2,                ( name + ".TempEnergy2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempFloat1" ).c_str(),                 TempFloat1,                 ( name + ".TempFloat1[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempFloat2" ).c_str(),                 TempFloat2,                 ( name + ".TempFloat2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempFloat3" ).c_str(),                 TempFloat3,                 ( name + ".TempFloat3[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TempFloat4" ).c_str(),                 TempFloat4,                 ( name + ".TempFloat4[" + name + ".Size]/F" ).c_str() );
        }

        void Register( TTree* root, const std::string& name = "PhotonInfo" )
        {
            SetBranchAddress( root, ( name + ".Size" ),                             &Size );
            SetBranchAddress( root, ( name + ".Pt" ),                               Pt );
            SetBranchAddress( root, ( name + ".Eta" ),                              Eta );
            SetBranchAddress( root, ( name + ".Phi" ),                              Phi );
            SetBranchAddress( root, ( name + ".Px" ),                               Px );
            SetBranchAddress( root, ( name + ".Py" ),                               Py );
            SetBranchAddress( root, ( name + ".Pz" ),                               Pz );
            SetBranchAddress( root, ( name + ".Energy" ),                           Energy );
            SetBranchAddress( root, ( name + ".isPFPhoton" ),                       isPFPhoton );
            SetBranchAddress( root, ( name + ".PhoEnergyCorrFactor" ),              PhoEnergyCorrFactor );
            SetBranchAddress( root, ( name + ".PhoEnergyPreCorrErr" ),              PhoEnergyPreCorrErr );
            SetBranchAddress( root, ( name + ".PhoEnergyPostCorrErr" ),             PhoEnergyPostCorrErr );
            SetBranchAddress( root, ( name + ".PhoEnergyPostCorrScaleUp" ),         PhoEnergyPostCorrScaleUp );
            SetBranchAddress( root, ( name + ".PhoEnergyPostCorrScaleDown" ),       PhoEnergyPostCorrScaleDown );
            SetBranchAddress( root, ( name + ".PhoEnergyPostCorrSmearUp" ),         PhoEnergyPostCorrSmearUp );
            SetBranchAddress( root, ( name + ".PhoEnergyPostCorrSmearDown" ),       PhoEnergyPostCorrSmearDown );
            SetBranchAddress( root, ( name + ".EgammaCutBasedPhoIdLOOSE" ),         EgammaCutBasedPhoIdLOOSE );
            SetBranchAddress( root, ( name + ".EgammaCutBasedPhoIdMEDIUM" ),        EgammaCutBasedPhoIdMEDIUM );
            SetBranchAddress( root, ( name + ".EgammaCutBasedPhoIdTIGHT" ),         EgammaCutBasedPhoIdTIGHT );
            SetBranchAddress( root, ( name + ".EgammaPhoIdMVA" ).c_str(),           EgammaPhoIdMVA );
            SetBranchAddress( root, ( name + ".ChargedHadronIsoR03" ).c_str(),      ChargedHadronIsoR03 );
            SetBranchAddress( root, ( name + ".NeutralHadronIsoR03" ).c_str(),      NeutralHadronIsoR03 );
            SetBranchAddress( root, ( name + ".PhotonIsoR03" ).c_str(),             PhotonIsoR03 );
            SetBranchAddress( root, ( name + ".WorstChargedIsolationR03" ).c_str(), WorstChargedIsolationR03 );
            SetBranchAddress( root, ( name + ".PFChIsoRhoCorr" ).c_str(),           PFChIsoRhoCorr );
            SetBranchAddress( root, ( name + ".PFNeuIsoRhoCorr" ).c_str(),          PFNeuIsoRhoCorr );
            SetBranchAddress( root, ( name + ".PFPhoIsoRhoCorr" ).c_str(),          PFPhoIsoRhoCorr );
            SetBranchAddress( root, ( name + ".passelectronveto" ).c_str(),         passelectronveto );
            SetBranchAddress( root, ( name + ".hasPixelSeed" ).c_str(),             hasPixelSeed );
            SetBranchAddress( root, ( name + ".EtaSC" ).c_str(),                    EtaSC );
            SetBranchAddress( root, ( name + ".PhiSC" ).c_str(),                    PhiSC );
            SetBranchAddress( root, ( name + ".rawEnergySC" ).c_str(),              rawEnergySC );
            SetBranchAddress( root, ( name + ".ESEnergySC" ).c_str(),               ESEnergySC );
            SetBranchAddress( root, ( name + ".EnergySC" ).c_str(),                 EnergySC );
            SetBranchAddress( root, ( name + ".E5x5" ).c_str(),                     E5x5 );
            SetBranchAddress( root, ( name + ".R9" ).c_str(),                       R9 );
            SetBranchAddress( root, ( name + ".SigmaIetaIeta" ).c_str(),            SigmaIetaIeta );
            SetBranchAddress( root, ( name + ".SigmaIetaIphi" ).c_str(),            SigmaIetaIphi );
            SetBranchAddress( root, ( name + ".SigmaIphiIphi" ).c_str(),            SigmaIphiIphi );
            SetBranchAddress( root, ( name + ".S4" ).c_str(),                       S4 );
            SetBranchAddress( root, ( name + ".ESEffSigmaRR" ).c_str(),             ESEffSigmaRR );
            SetBranchAddress( root, ( name + ".EtaWidth" ).c_str(),                 EtaWidth );
            SetBranchAddress( root, ( name + ".PhiWidth" ).c_str(),                 PhiWidth );
            SetBranchAddress( root, ( name + ".HoverE" ).c_str(),                   HoverE );
            SetBranchAddress( root, ( name + ".hadTowOverEm" ).c_str(),             hadTowOverEm );
            SetBranchAddress( root, ( name + ".GenPt" ).c_str(),                    GenPt );
            SetBranchAddress( root, ( name + ".GenEta" ).c_str(),                   GenEta );
            SetBranchAddress( root, ( name + ".GenPhi" ).c_str(),                   GenPhi );
            SetBranchAddress( root, ( name + ".GenPdgID" ).c_str(),                 GenPdgID );
            SetBranchAddress( root, ( name + ".TempPt1" ).c_str(),                  TempPt1 );
            SetBranchAddress( root, ( name + ".TempEta1" ).c_str(),                 TempEta1 );
            SetBranchAddress( root, ( name + ".TempPhi1" ).c_str(),                 TempPhi1 );
            SetBranchAddress( root, ( name + ".TempEnergy1" ).c_str(),              TempEnergy1 );
            SetBranchAddress( root, ( name + ".TempPt2" ).c_str(),                  TempPt2 );
            SetBranchAddress( root, ( name + ".TempEta2" ).c_str(),                 TempEta2 );
            SetBranchAddress( root, ( name + ".TempPhi2" ).c_str(),                 TempPhi2 );
            SetBranchAddress( root, ( name + ".TempEnergy2" ).c_str(),              TempEnergy2 );
            SetBranchAddress( root, ( name + ".TempFloat1" ).c_str(),               TempFloat1 );
            SetBranchAddress( root, ( name + ".TempFloat2" ).c_str(),               TempFloat2 );
            SetBranchAddress( root, ( name + ".TempFloat3" ).c_str(),               TempFloat3 );
            SetBranchAddress( root, ( name + ".TempFloat4" ).c_str(),               TempFloat4 );
        }
};

class TrgInfoBranches {
    public:

        Int_t Size;
        Int_t TriggerBit [ MAX_TRGOBJS ];
        Int_t FilterLabel [ MAX_TRGOBJS ];
        Float_t Pt [ MAX_TRGOBJS ];
        Float_t Eta [ MAX_TRGOBJS ];
        Float_t Phi [ MAX_TRGOBJS ];
        Float_t Energy [ MAX_TRGOBJS ];
        Int_t TrgCount;
        Int_t nTrgBook;
        Char_t TrgBook [ N_TRIGGER_BOOKINGS ];
        Int_t nHLT;
        Float_t HighPurityFraction;
        Int_t NofTracks;
        Int_t HLTPrescaleFactor [ 512 ];
        Int_t HLTName2enum [ 512 ];
        Bool_t HLTbits [ N_TRIGGER_BOOKINGS ];
        Int_t L1 [ 128 ];
        Int_t TT [ 64 ];

        void RegisterTree( TTree* root, const std::string& name = "TrgInfo" )
        {
            root->Branch( ( name + ".Size" ).c_str(),               &Size,               ( name + "Size/I" ).c_str() );
            root->Branch( ( name + ".TriggerBit" ).c_str(),         TriggerBit,          ( name + ".TriggerBit[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".FilterLabel" ).c_str(),        FilterLabel,         ( name + ".FilterLabel[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".Pt" ).c_str(),                 Pt,                  ( name + ".Pt[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Eta" ).c_str(),                Eta,                 ( name + ".Eta[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Phi" ).c_str(),                Phi,                 ( name + ".Phi[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Energy" ).c_str(),             Energy,              ( name + ".Energy[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".TrgCount" ).c_str(),           &TrgCount,           ( name + "TrgCount/I" ).c_str() );
            root->Branch( ( name + ".nTrgBook" ).c_str(),           &nTrgBook,           ( name + "nTrgBook/I" ).c_str() );
            root->Branch( ( name + ".TrgBook" ).c_str(),            TrgBook,             ( name + ".TrgBook[" + name + ".nTrgBook]/C" ).c_str() );
            root->Branch( ( name + ".nHLT" ).c_str(),               &nHLT,               ( name + "nHLT/I" ).c_str() );
            root->Branch( ( name + ".HighPurityFraction" ).c_str(), &HighPurityFraction, ( name + "HighPurityFraction/F" ).c_str() );
            root->Branch( ( name + ".NofTracks" ).c_str(),          &NofTracks,          ( name + "NofTracks/I" ).c_str() );
            root->Branch( ( name + ".HLTPrescaleFactor" ).c_str(),  HLTPrescaleFactor,   ( name + ".HLTPrescaleFactor[" + name + ".nHLT]/I" ).c_str() );
            root->Branch( ( name + ".HLTName2enum" ).c_str(),       HLTName2enum,        ( name + ".HLTName2enum[" + name + ".nHLT]/I" ).c_str() );
            root->Branch( ( name + ".HLTbits" ).c_str(),            HLTbits,             ( name + ".HLTbits[" + name + ".nHLT]/O" ).c_str() );
            root->Branch( ( name + ".L1" ).c_str(),                 L1,                  ( name + ".L1[128]/I" ).c_str() );
            root->Branch( ( name + ".TT" ).c_str(),                 TT,                  ( name + ".TT[64]/I" ).c_str() );
        }

        void Register( TTree* root, const std::string& name = "TrgInfo" )
        {
            SetBranchAddress( root, ( name + ".Size" ),                       &Size );
            SetBranchAddress( root, ( name + ".TriggerBit" ),                 TriggerBit );
            SetBranchAddress( root, ( name + ".FilterLabel" ).c_str(),        FilterLabel );
            SetBranchAddress( root, ( name + ".Pt" ).c_str(),                 Pt );
            SetBranchAddress( root, ( name + ".Eta" ).c_str(),                Eta );
            SetBranchAddress( root, ( name + ".Phi" ).c_str(),                Phi );
            SetBranchAddress( root, ( name + ".Energy" ).c_str(),             Energy );
            SetBranchAddress( root, ( name + ".TrgCount" ).c_str(),           &TrgCount );
            SetBranchAddress( root, ( name + ".nTrgBook" ).c_str(),           &nTrgBook );
            SetBranchAddress( root, ( name + ".TrgBook" ).c_str(),            TrgBook );
            SetBranchAddress( root, ( name + ".nHLT" ).c_str(),               &nHLT );
            SetBranchAddress( root, ( name + ".HighPurityFraction" ).c_str(), &HighPurityFraction );
            SetBranchAddress( root, ( name + ".NofTracks" ).c_str(),          &NofTracks );
            SetBranchAddress( root, ( name + ".HLTPrescaleFactor" ).c_str(),  HLTPrescaleFactor );
            SetBranchAddress( root, ( name + ".HLTName2enum" ).c_str(),       HLTName2enum );
            SetBranchAddress( root, ( name + ".HLTbits" ).c_str(),            HLTbits );
            SetBranchAddress( root, ( name + ".L1" ).c_str(),                 L1 );
            SetBranchAddress( root, ( name + ".TT" ).c_str(),                 TT );
        }
};

class VertexInfoBranches {
    public:

        Int_t Size;
        Int_t isValid [ MAX_Vertices ];
        Bool_t isFake [ MAX_Vertices ];
        Float_t Ndof [ MAX_Vertices ];
        Float_t NormalizedChi2 [ MAX_Vertices ];
        Float_t x [ MAX_Vertices ];
        Float_t y [ MAX_Vertices ];
        Float_t z [ MAX_Vertices ];
        Float_t Rho [ MAX_Vertices ];

        void RegisterTree( TTree* root, const std::string& name = "VertexInfo" )
        {
            root->Branch( ( name + ".Size" ).c_str(),           &Size,          ( name + "Size/I" ).c_str() );
            root->Branch( ( name + ".isValid" ).c_str(),        isValid,        ( name + ".isValid[" + name + ".Size]/I" ).c_str() );
            root->Branch( ( name + ".isFake" ).c_str(),         isFake,         ( name + ".isFake[" + name + ".Size]/O" ).c_str() );
            root->Branch( ( name + ".Ndof" ).c_str(),           Ndof,           ( name + ".Ndof[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".NormalizedChi2" ).c_str(), NormalizedChi2, ( name + ".NormalizedChi2[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".x" ).c_str(),              x,              ( name + ".x[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".y" ).c_str(),              y,              ( name + ".y[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".z" ).c_str(),              z,              ( name + ".z[" + name + ".Size]/F" ).c_str() );
            root->Branch( ( name + ".Rho" ).c_str(),            Rho,            ( name + ".Rho[" + name + ".Size]/F" ).c_str() );
        }

        void Register( TTree* root, const std::string& name = "VertexInfo" )
        {
            SetBranchAddress( root, ( name + ".Size" ).c_str(),           &Size );
            SetBranchAddress( root, ( name + ".isValid" ).c_str(),        isValid );
            SetBranchAddress( root, ( name + ".isFake" ).c_str(),         isFake );
            SetBranchAddress( root, ( name + ".Ndof" ).c_str(),           Ndof );
            SetBranchAddress( root, ( name + ".NormalizedChi2" ).c_str(), NormalizedChi2 );
            SetBranchAddress( root, ( name + ".x" ).c_str(),              x );
            SetBranchAddress( root, ( name + ".y" ).c_str(),              y );
            SetBranchAddress( root, ( name + ".z" ).c_str(),              z );
            SetBranchAddress( root, ( name + ".Rho" ).c_str(),            Rho );
        }
};

class RunInfoBranches {
    public:

        Int_t PdfID;

        void RegisterTree( TTree* root, const std::string& name = "RunInfo" )
        {
            root->Branch( ( name + ".PdfID" ).c_str(), &PdfID, ( name + "PdfID/I" ).c_str() );
        }

        void Register( TTree* root, const std::string& name = "RunInfo" )
        {
            SetBranchAddress( root, ( name + ".PdfID" ).c_str(), &PdfID );
        }
};


#endif// __BPRIMEKIT_FORMAT_H__
